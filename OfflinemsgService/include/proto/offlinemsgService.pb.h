// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: offlinemsgService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_offlinemsgService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_offlinemsgService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_offlinemsgService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_offlinemsgService_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_offlinemsgService_2eproto;
namespace offlinemsgProto {
class DelOfflineRequest;
struct DelOfflineRequestDefaultTypeInternal;
extern DelOfflineRequestDefaultTypeInternal _DelOfflineRequest_default_instance_;
class DelOfflineResponse;
struct DelOfflineResponseDefaultTypeInternal;
extern DelOfflineResponseDefaultTypeInternal _DelOfflineResponse_default_instance_;
class ReadOfflineRequest;
struct ReadOfflineRequestDefaultTypeInternal;
extern ReadOfflineRequestDefaultTypeInternal _ReadOfflineRequest_default_instance_;
class ReadOfflineResponse;
struct ReadOfflineResponseDefaultTypeInternal;
extern ReadOfflineResponseDefaultTypeInternal _ReadOfflineResponse_default_instance_;
class WriteOfflineReponse;
struct WriteOfflineReponseDefaultTypeInternal;
extern WriteOfflineReponseDefaultTypeInternal _WriteOfflineReponse_default_instance_;
class WriteOfflineRequest;
struct WriteOfflineRequestDefaultTypeInternal;
extern WriteOfflineRequestDefaultTypeInternal _WriteOfflineRequest_default_instance_;
}  // namespace offlinemsgProto
PROTOBUF_NAMESPACE_OPEN
template<> ::offlinemsgProto::DelOfflineRequest* Arena::CreateMaybeMessage<::offlinemsgProto::DelOfflineRequest>(Arena*);
template<> ::offlinemsgProto::DelOfflineResponse* Arena::CreateMaybeMessage<::offlinemsgProto::DelOfflineResponse>(Arena*);
template<> ::offlinemsgProto::ReadOfflineRequest* Arena::CreateMaybeMessage<::offlinemsgProto::ReadOfflineRequest>(Arena*);
template<> ::offlinemsgProto::ReadOfflineResponse* Arena::CreateMaybeMessage<::offlinemsgProto::ReadOfflineResponse>(Arena*);
template<> ::offlinemsgProto::WriteOfflineReponse* Arena::CreateMaybeMessage<::offlinemsgProto::WriteOfflineReponse>(Arena*);
template<> ::offlinemsgProto::WriteOfflineRequest* Arena::CreateMaybeMessage<::offlinemsgProto::WriteOfflineRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace offlinemsgProto {

// ===================================================================

class WriteOfflineRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:offlinemsgProto.WriteOfflineRequest) */ {
 public:
  inline WriteOfflineRequest() : WriteOfflineRequest(nullptr) {}
  ~WriteOfflineRequest() override;
  explicit PROTOBUF_CONSTEXPR WriteOfflineRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriteOfflineRequest(const WriteOfflineRequest& from);
  WriteOfflineRequest(WriteOfflineRequest&& from) noexcept
    : WriteOfflineRequest() {
    *this = ::std::move(from);
  }

  inline WriteOfflineRequest& operator=(const WriteOfflineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteOfflineRequest& operator=(WriteOfflineRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriteOfflineRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriteOfflineRequest* internal_default_instance() {
    return reinterpret_cast<const WriteOfflineRequest*>(
               &_WriteOfflineRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WriteOfflineRequest& a, WriteOfflineRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteOfflineRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteOfflineRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WriteOfflineRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WriteOfflineRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WriteOfflineRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WriteOfflineRequest& from) {
    WriteOfflineRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteOfflineRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "offlinemsgProto.WriteOfflineRequest";
  }
  protected:
  explicit WriteOfflineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kFriendidFieldNumber = 1,
  };
  // bytes msg = 2;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 friendid = 1;
  void clear_friendid();
  int32_t friendid() const;
  void set_friendid(int32_t value);
  private:
  int32_t _internal_friendid() const;
  void _internal_set_friendid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:offlinemsgProto.WriteOfflineRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    int32_t friendid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_offlinemsgService_2eproto;
};
// -------------------------------------------------------------------

class WriteOfflineReponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:offlinemsgProto.WriteOfflineReponse) */ {
 public:
  inline WriteOfflineReponse() : WriteOfflineReponse(nullptr) {}
  ~WriteOfflineReponse() override;
  explicit PROTOBUF_CONSTEXPR WriteOfflineReponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriteOfflineReponse(const WriteOfflineReponse& from);
  WriteOfflineReponse(WriteOfflineReponse&& from) noexcept
    : WriteOfflineReponse() {
    *this = ::std::move(from);
  }

  inline WriteOfflineReponse& operator=(const WriteOfflineReponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteOfflineReponse& operator=(WriteOfflineReponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriteOfflineReponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriteOfflineReponse* internal_default_instance() {
    return reinterpret_cast<const WriteOfflineReponse*>(
               &_WriteOfflineReponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WriteOfflineReponse& a, WriteOfflineReponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteOfflineReponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteOfflineReponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WriteOfflineReponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WriteOfflineReponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WriteOfflineReponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WriteOfflineReponse& from) {
    WriteOfflineReponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteOfflineReponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "offlinemsgProto.WriteOfflineReponse";
  }
  protected:
  explicit WriteOfflineReponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 2,
    kErrcodeFieldNumber = 1,
  };
  // bytes errmsg = 2;
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // int32 errcode = 1;
  void clear_errcode();
  int32_t errcode() const;
  void set_errcode(int32_t value);
  private:
  int32_t _internal_errcode() const;
  void _internal_set_errcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:offlinemsgProto.WriteOfflineReponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
    int32_t errcode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_offlinemsgService_2eproto;
};
// -------------------------------------------------------------------

class ReadOfflineRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:offlinemsgProto.ReadOfflineRequest) */ {
 public:
  inline ReadOfflineRequest() : ReadOfflineRequest(nullptr) {}
  ~ReadOfflineRequest() override;
  explicit PROTOBUF_CONSTEXPR ReadOfflineRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadOfflineRequest(const ReadOfflineRequest& from);
  ReadOfflineRequest(ReadOfflineRequest&& from) noexcept
    : ReadOfflineRequest() {
    *this = ::std::move(from);
  }

  inline ReadOfflineRequest& operator=(const ReadOfflineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadOfflineRequest& operator=(ReadOfflineRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadOfflineRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadOfflineRequest* internal_default_instance() {
    return reinterpret_cast<const ReadOfflineRequest*>(
               &_ReadOfflineRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ReadOfflineRequest& a, ReadOfflineRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadOfflineRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadOfflineRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadOfflineRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadOfflineRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadOfflineRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReadOfflineRequest& from) {
    ReadOfflineRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadOfflineRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "offlinemsgProto.ReadOfflineRequest";
  }
  protected:
  explicit ReadOfflineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 1,
  };
  // int32 userid = 1;
  void clear_userid();
  int32_t userid() const;
  void set_userid(int32_t value);
  private:
  int32_t _internal_userid() const;
  void _internal_set_userid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:offlinemsgProto.ReadOfflineRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t userid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_offlinemsgService_2eproto;
};
// -------------------------------------------------------------------

class ReadOfflineResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:offlinemsgProto.ReadOfflineResponse) */ {
 public:
  inline ReadOfflineResponse() : ReadOfflineResponse(nullptr) {}
  ~ReadOfflineResponse() override;
  explicit PROTOBUF_CONSTEXPR ReadOfflineResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadOfflineResponse(const ReadOfflineResponse& from);
  ReadOfflineResponse(ReadOfflineResponse&& from) noexcept
    : ReadOfflineResponse() {
    *this = ::std::move(from);
  }

  inline ReadOfflineResponse& operator=(const ReadOfflineResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadOfflineResponse& operator=(ReadOfflineResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadOfflineResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadOfflineResponse* internal_default_instance() {
    return reinterpret_cast<const ReadOfflineResponse*>(
               &_ReadOfflineResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReadOfflineResponse& a, ReadOfflineResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadOfflineResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadOfflineResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadOfflineResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadOfflineResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadOfflineResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReadOfflineResponse& from) {
    ReadOfflineResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadOfflineResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "offlinemsgProto.ReadOfflineResponse";
  }
  protected:
  explicit ReadOfflineResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 3,
    kErrmsgFieldNumber = 2,
    kErrcodeFieldNumber = 1,
  };
  // repeated bytes msg = 3;
  int msg_size() const;
  private:
  int _internal_msg_size() const;
  public:
  void clear_msg();
  const std::string& msg(int index) const;
  std::string* mutable_msg(int index);
  void set_msg(int index, const std::string& value);
  void set_msg(int index, std::string&& value);
  void set_msg(int index, const char* value);
  void set_msg(int index, const void* value, size_t size);
  std::string* add_msg();
  void add_msg(const std::string& value);
  void add_msg(std::string&& value);
  void add_msg(const char* value);
  void add_msg(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& msg() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_msg();
  private:
  const std::string& _internal_msg(int index) const;
  std::string* _internal_add_msg();
  public:

  // bytes errmsg = 2;
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // int32 errcode = 1;
  void clear_errcode();
  int32_t errcode() const;
  void set_errcode(int32_t value);
  private:
  int32_t _internal_errcode() const;
  void _internal_set_errcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:offlinemsgProto.ReadOfflineResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> msg_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
    int32_t errcode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_offlinemsgService_2eproto;
};
// -------------------------------------------------------------------

class DelOfflineRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:offlinemsgProto.DelOfflineRequest) */ {
 public:
  inline DelOfflineRequest() : DelOfflineRequest(nullptr) {}
  ~DelOfflineRequest() override;
  explicit PROTOBUF_CONSTEXPR DelOfflineRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DelOfflineRequest(const DelOfflineRequest& from);
  DelOfflineRequest(DelOfflineRequest&& from) noexcept
    : DelOfflineRequest() {
    *this = ::std::move(from);
  }

  inline DelOfflineRequest& operator=(const DelOfflineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelOfflineRequest& operator=(DelOfflineRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DelOfflineRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DelOfflineRequest* internal_default_instance() {
    return reinterpret_cast<const DelOfflineRequest*>(
               &_DelOfflineRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DelOfflineRequest& a, DelOfflineRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DelOfflineRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelOfflineRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DelOfflineRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DelOfflineRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DelOfflineRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DelOfflineRequest& from) {
    DelOfflineRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelOfflineRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "offlinemsgProto.DelOfflineRequest";
  }
  protected:
  explicit DelOfflineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 1,
  };
  // int32 userid = 1;
  void clear_userid();
  int32_t userid() const;
  void set_userid(int32_t value);
  private:
  int32_t _internal_userid() const;
  void _internal_set_userid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:offlinemsgProto.DelOfflineRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t userid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_offlinemsgService_2eproto;
};
// -------------------------------------------------------------------

class DelOfflineResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:offlinemsgProto.DelOfflineResponse) */ {
 public:
  inline DelOfflineResponse() : DelOfflineResponse(nullptr) {}
  ~DelOfflineResponse() override;
  explicit PROTOBUF_CONSTEXPR DelOfflineResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DelOfflineResponse(const DelOfflineResponse& from);
  DelOfflineResponse(DelOfflineResponse&& from) noexcept
    : DelOfflineResponse() {
    *this = ::std::move(from);
  }

  inline DelOfflineResponse& operator=(const DelOfflineResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelOfflineResponse& operator=(DelOfflineResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DelOfflineResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DelOfflineResponse* internal_default_instance() {
    return reinterpret_cast<const DelOfflineResponse*>(
               &_DelOfflineResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DelOfflineResponse& a, DelOfflineResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DelOfflineResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelOfflineResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DelOfflineResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DelOfflineResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DelOfflineResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DelOfflineResponse& from) {
    DelOfflineResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelOfflineResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "offlinemsgProto.DelOfflineResponse";
  }
  protected:
  explicit DelOfflineResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 2,
    kErrcodeFieldNumber = 1,
  };
  // bytes errmsg = 2;
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // int32 errcode = 1;
  void clear_errcode();
  int32_t errcode() const;
  void set_errcode(int32_t value);
  private:
  int32_t _internal_errcode() const;
  void _internal_set_errcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:offlinemsgProto.DelOfflineResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
    int32_t errcode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_offlinemsgService_2eproto;
};
// ===================================================================

class OfflineServiceRpc_Stub;

class OfflineServiceRpc : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline OfflineServiceRpc() {};
 public:
  virtual ~OfflineServiceRpc();

  typedef OfflineServiceRpc_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void WriteOffline(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::offlinemsgProto::WriteOfflineRequest* request,
                       ::offlinemsgProto::WriteOfflineReponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ReadOffline(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::offlinemsgProto::ReadOfflineRequest* request,
                       ::offlinemsgProto::ReadOfflineResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void DelOffline(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::offlinemsgProto::ReadOfflineRequest* request,
                       ::offlinemsgProto::DelOfflineResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(OfflineServiceRpc);
};

class OfflineServiceRpc_Stub : public OfflineServiceRpc {
 public:
  OfflineServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  OfflineServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~OfflineServiceRpc_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements OfflineServiceRpc ------------------------------------------

  void WriteOffline(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::offlinemsgProto::WriteOfflineRequest* request,
                       ::offlinemsgProto::WriteOfflineReponse* response,
                       ::google::protobuf::Closure* done);
  void ReadOffline(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::offlinemsgProto::ReadOfflineRequest* request,
                       ::offlinemsgProto::ReadOfflineResponse* response,
                       ::google::protobuf::Closure* done);
  void DelOffline(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::offlinemsgProto::ReadOfflineRequest* request,
                       ::offlinemsgProto::DelOfflineResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(OfflineServiceRpc_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WriteOfflineRequest

// int32 friendid = 1;
inline void WriteOfflineRequest::clear_friendid() {
  _impl_.friendid_ = 0;
}
inline int32_t WriteOfflineRequest::_internal_friendid() const {
  return _impl_.friendid_;
}
inline int32_t WriteOfflineRequest::friendid() const {
  // @@protoc_insertion_point(field_get:offlinemsgProto.WriteOfflineRequest.friendid)
  return _internal_friendid();
}
inline void WriteOfflineRequest::_internal_set_friendid(int32_t value) {
  
  _impl_.friendid_ = value;
}
inline void WriteOfflineRequest::set_friendid(int32_t value) {
  _internal_set_friendid(value);
  // @@protoc_insertion_point(field_set:offlinemsgProto.WriteOfflineRequest.friendid)
}

// bytes msg = 2;
inline void WriteOfflineRequest::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& WriteOfflineRequest::msg() const {
  // @@protoc_insertion_point(field_get:offlinemsgProto.WriteOfflineRequest.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WriteOfflineRequest::set_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:offlinemsgProto.WriteOfflineRequest.msg)
}
inline std::string* WriteOfflineRequest::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:offlinemsgProto.WriteOfflineRequest.msg)
  return _s;
}
inline const std::string& WriteOfflineRequest::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void WriteOfflineRequest::_internal_set_msg(const std::string& value) {
  
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* WriteOfflineRequest::_internal_mutable_msg() {
  
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* WriteOfflineRequest::release_msg() {
  // @@protoc_insertion_point(field_release:offlinemsgProto.WriteOfflineRequest.msg)
  return _impl_.msg_.Release();
}
inline void WriteOfflineRequest::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:offlinemsgProto.WriteOfflineRequest.msg)
}

// -------------------------------------------------------------------

// WriteOfflineReponse

// int32 errcode = 1;
inline void WriteOfflineReponse::clear_errcode() {
  _impl_.errcode_ = 0;
}
inline int32_t WriteOfflineReponse::_internal_errcode() const {
  return _impl_.errcode_;
}
inline int32_t WriteOfflineReponse::errcode() const {
  // @@protoc_insertion_point(field_get:offlinemsgProto.WriteOfflineReponse.errcode)
  return _internal_errcode();
}
inline void WriteOfflineReponse::_internal_set_errcode(int32_t value) {
  
  _impl_.errcode_ = value;
}
inline void WriteOfflineReponse::set_errcode(int32_t value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:offlinemsgProto.WriteOfflineReponse.errcode)
}

// bytes errmsg = 2;
inline void WriteOfflineReponse::clear_errmsg() {
  _impl_.errmsg_.ClearToEmpty();
}
inline const std::string& WriteOfflineReponse::errmsg() const {
  // @@protoc_insertion_point(field_get:offlinemsgProto.WriteOfflineReponse.errmsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WriteOfflineReponse::set_errmsg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.errmsg_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:offlinemsgProto.WriteOfflineReponse.errmsg)
}
inline std::string* WriteOfflineReponse::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:offlinemsgProto.WriteOfflineReponse.errmsg)
  return _s;
}
inline const std::string& WriteOfflineReponse::_internal_errmsg() const {
  return _impl_.errmsg_.Get();
}
inline void WriteOfflineReponse::_internal_set_errmsg(const std::string& value) {
  
  _impl_.errmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* WriteOfflineReponse::_internal_mutable_errmsg() {
  
  return _impl_.errmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* WriteOfflineReponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:offlinemsgProto.WriteOfflineReponse.errmsg)
  return _impl_.errmsg_.Release();
}
inline void WriteOfflineReponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  _impl_.errmsg_.SetAllocated(errmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errmsg_.IsDefault()) {
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:offlinemsgProto.WriteOfflineReponse.errmsg)
}

// -------------------------------------------------------------------

// ReadOfflineRequest

// int32 userid = 1;
inline void ReadOfflineRequest::clear_userid() {
  _impl_.userid_ = 0;
}
inline int32_t ReadOfflineRequest::_internal_userid() const {
  return _impl_.userid_;
}
inline int32_t ReadOfflineRequest::userid() const {
  // @@protoc_insertion_point(field_get:offlinemsgProto.ReadOfflineRequest.userid)
  return _internal_userid();
}
inline void ReadOfflineRequest::_internal_set_userid(int32_t value) {
  
  _impl_.userid_ = value;
}
inline void ReadOfflineRequest::set_userid(int32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:offlinemsgProto.ReadOfflineRequest.userid)
}

// -------------------------------------------------------------------

// ReadOfflineResponse

// int32 errcode = 1;
inline void ReadOfflineResponse::clear_errcode() {
  _impl_.errcode_ = 0;
}
inline int32_t ReadOfflineResponse::_internal_errcode() const {
  return _impl_.errcode_;
}
inline int32_t ReadOfflineResponse::errcode() const {
  // @@protoc_insertion_point(field_get:offlinemsgProto.ReadOfflineResponse.errcode)
  return _internal_errcode();
}
inline void ReadOfflineResponse::_internal_set_errcode(int32_t value) {
  
  _impl_.errcode_ = value;
}
inline void ReadOfflineResponse::set_errcode(int32_t value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:offlinemsgProto.ReadOfflineResponse.errcode)
}

// bytes errmsg = 2;
inline void ReadOfflineResponse::clear_errmsg() {
  _impl_.errmsg_.ClearToEmpty();
}
inline const std::string& ReadOfflineResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:offlinemsgProto.ReadOfflineResponse.errmsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadOfflineResponse::set_errmsg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.errmsg_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:offlinemsgProto.ReadOfflineResponse.errmsg)
}
inline std::string* ReadOfflineResponse::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:offlinemsgProto.ReadOfflineResponse.errmsg)
  return _s;
}
inline const std::string& ReadOfflineResponse::_internal_errmsg() const {
  return _impl_.errmsg_.Get();
}
inline void ReadOfflineResponse::_internal_set_errmsg(const std::string& value) {
  
  _impl_.errmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* ReadOfflineResponse::_internal_mutable_errmsg() {
  
  return _impl_.errmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* ReadOfflineResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:offlinemsgProto.ReadOfflineResponse.errmsg)
  return _impl_.errmsg_.Release();
}
inline void ReadOfflineResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  _impl_.errmsg_.SetAllocated(errmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errmsg_.IsDefault()) {
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:offlinemsgProto.ReadOfflineResponse.errmsg)
}

// repeated bytes msg = 3;
inline int ReadOfflineResponse::_internal_msg_size() const {
  return _impl_.msg_.size();
}
inline int ReadOfflineResponse::msg_size() const {
  return _internal_msg_size();
}
inline void ReadOfflineResponse::clear_msg() {
  _impl_.msg_.Clear();
}
inline std::string* ReadOfflineResponse::add_msg() {
  std::string* _s = _internal_add_msg();
  // @@protoc_insertion_point(field_add_mutable:offlinemsgProto.ReadOfflineResponse.msg)
  return _s;
}
inline const std::string& ReadOfflineResponse::_internal_msg(int index) const {
  return _impl_.msg_.Get(index);
}
inline const std::string& ReadOfflineResponse::msg(int index) const {
  // @@protoc_insertion_point(field_get:offlinemsgProto.ReadOfflineResponse.msg)
  return _internal_msg(index);
}
inline std::string* ReadOfflineResponse::mutable_msg(int index) {
  // @@protoc_insertion_point(field_mutable:offlinemsgProto.ReadOfflineResponse.msg)
  return _impl_.msg_.Mutable(index);
}
inline void ReadOfflineResponse::set_msg(int index, const std::string& value) {
  _impl_.msg_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:offlinemsgProto.ReadOfflineResponse.msg)
}
inline void ReadOfflineResponse::set_msg(int index, std::string&& value) {
  _impl_.msg_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:offlinemsgProto.ReadOfflineResponse.msg)
}
inline void ReadOfflineResponse::set_msg(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.msg_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:offlinemsgProto.ReadOfflineResponse.msg)
}
inline void ReadOfflineResponse::set_msg(int index, const void* value, size_t size) {
  _impl_.msg_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:offlinemsgProto.ReadOfflineResponse.msg)
}
inline std::string* ReadOfflineResponse::_internal_add_msg() {
  return _impl_.msg_.Add();
}
inline void ReadOfflineResponse::add_msg(const std::string& value) {
  _impl_.msg_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:offlinemsgProto.ReadOfflineResponse.msg)
}
inline void ReadOfflineResponse::add_msg(std::string&& value) {
  _impl_.msg_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:offlinemsgProto.ReadOfflineResponse.msg)
}
inline void ReadOfflineResponse::add_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.msg_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:offlinemsgProto.ReadOfflineResponse.msg)
}
inline void ReadOfflineResponse::add_msg(const void* value, size_t size) {
  _impl_.msg_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:offlinemsgProto.ReadOfflineResponse.msg)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReadOfflineResponse::msg() const {
  // @@protoc_insertion_point(field_list:offlinemsgProto.ReadOfflineResponse.msg)
  return _impl_.msg_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ReadOfflineResponse::mutable_msg() {
  // @@protoc_insertion_point(field_mutable_list:offlinemsgProto.ReadOfflineResponse.msg)
  return &_impl_.msg_;
}

// -------------------------------------------------------------------

// DelOfflineRequest

// int32 userid = 1;
inline void DelOfflineRequest::clear_userid() {
  _impl_.userid_ = 0;
}
inline int32_t DelOfflineRequest::_internal_userid() const {
  return _impl_.userid_;
}
inline int32_t DelOfflineRequest::userid() const {
  // @@protoc_insertion_point(field_get:offlinemsgProto.DelOfflineRequest.userid)
  return _internal_userid();
}
inline void DelOfflineRequest::_internal_set_userid(int32_t value) {
  
  _impl_.userid_ = value;
}
inline void DelOfflineRequest::set_userid(int32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:offlinemsgProto.DelOfflineRequest.userid)
}

// -------------------------------------------------------------------

// DelOfflineResponse

// int32 errcode = 1;
inline void DelOfflineResponse::clear_errcode() {
  _impl_.errcode_ = 0;
}
inline int32_t DelOfflineResponse::_internal_errcode() const {
  return _impl_.errcode_;
}
inline int32_t DelOfflineResponse::errcode() const {
  // @@protoc_insertion_point(field_get:offlinemsgProto.DelOfflineResponse.errcode)
  return _internal_errcode();
}
inline void DelOfflineResponse::_internal_set_errcode(int32_t value) {
  
  _impl_.errcode_ = value;
}
inline void DelOfflineResponse::set_errcode(int32_t value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:offlinemsgProto.DelOfflineResponse.errcode)
}

// bytes errmsg = 2;
inline void DelOfflineResponse::clear_errmsg() {
  _impl_.errmsg_.ClearToEmpty();
}
inline const std::string& DelOfflineResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:offlinemsgProto.DelOfflineResponse.errmsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DelOfflineResponse::set_errmsg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.errmsg_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:offlinemsgProto.DelOfflineResponse.errmsg)
}
inline std::string* DelOfflineResponse::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:offlinemsgProto.DelOfflineResponse.errmsg)
  return _s;
}
inline const std::string& DelOfflineResponse::_internal_errmsg() const {
  return _impl_.errmsg_.Get();
}
inline void DelOfflineResponse::_internal_set_errmsg(const std::string& value) {
  
  _impl_.errmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* DelOfflineResponse::_internal_mutable_errmsg() {
  
  return _impl_.errmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* DelOfflineResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:offlinemsgProto.DelOfflineResponse.errmsg)
  return _impl_.errmsg_.Release();
}
inline void DelOfflineResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  _impl_.errmsg_.SetAllocated(errmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errmsg_.IsDefault()) {
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:offlinemsgProto.DelOfflineResponse.errmsg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace offlinemsgProto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_offlinemsgService_2eproto
