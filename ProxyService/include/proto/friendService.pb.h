// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friendService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_friendService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_friendService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_friendService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_friendService_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_friendService_2eproto;
namespace friendProto {
class AddFriendRequest;
struct AddFriendRequestDefaultTypeInternal;
extern AddFriendRequestDefaultTypeInternal _AddFriendRequest_default_instance_;
class AddFriendResponse;
struct AddFriendResponseDefaultTypeInternal;
extern AddFriendResponseDefaultTypeInternal _AddFriendResponse_default_instance_;
class DelFriendRequest;
struct DelFriendRequestDefaultTypeInternal;
extern DelFriendRequestDefaultTypeInternal _DelFriendRequest_default_instance_;
class DelFriendResponse;
struct DelFriendResponseDefaultTypeInternal;
extern DelFriendResponseDefaultTypeInternal _DelFriendResponse_default_instance_;
class FriendListRequest;
struct FriendListRequestDefaultTypeInternal;
extern FriendListRequestDefaultTypeInternal _FriendListRequest_default_instance_;
class FriendListResponse;
struct FriendListResponseDefaultTypeInternal;
extern FriendListResponseDefaultTypeInternal _FriendListResponse_default_instance_;
class User;
struct UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
class UserInfoRequest;
struct UserInfoRequestDefaultTypeInternal;
extern UserInfoRequestDefaultTypeInternal _UserInfoRequest_default_instance_;
class UserInfoResponse;
struct UserInfoResponseDefaultTypeInternal;
extern UserInfoResponseDefaultTypeInternal _UserInfoResponse_default_instance_;
}  // namespace friendProto
PROTOBUF_NAMESPACE_OPEN
template<> ::friendProto::AddFriendRequest* Arena::CreateMaybeMessage<::friendProto::AddFriendRequest>(Arena*);
template<> ::friendProto::AddFriendResponse* Arena::CreateMaybeMessage<::friendProto::AddFriendResponse>(Arena*);
template<> ::friendProto::DelFriendRequest* Arena::CreateMaybeMessage<::friendProto::DelFriendRequest>(Arena*);
template<> ::friendProto::DelFriendResponse* Arena::CreateMaybeMessage<::friendProto::DelFriendResponse>(Arena*);
template<> ::friendProto::FriendListRequest* Arena::CreateMaybeMessage<::friendProto::FriendListRequest>(Arena*);
template<> ::friendProto::FriendListResponse* Arena::CreateMaybeMessage<::friendProto::FriendListResponse>(Arena*);
template<> ::friendProto::User* Arena::CreateMaybeMessage<::friendProto::User>(Arena*);
template<> ::friendProto::UserInfoRequest* Arena::CreateMaybeMessage<::friendProto::UserInfoRequest>(Arena*);
template<> ::friendProto::UserInfoResponse* Arena::CreateMaybeMessage<::friendProto::UserInfoResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace friendProto {

enum STATE : int {
  ONLINE = 0,
  OFFLINE = 1,
  STATE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  STATE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool STATE_IsValid(int value);
constexpr STATE STATE_MIN = ONLINE;
constexpr STATE STATE_MAX = OFFLINE;
constexpr int STATE_ARRAYSIZE = STATE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* STATE_descriptor();
template<typename T>
inline const std::string& STATE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, STATE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function STATE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    STATE_descriptor(), enum_t_value);
}
inline bool STATE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, STATE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<STATE>(
    STATE_descriptor(), name, value);
}
// ===================================================================

class User final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:friendProto.User) */ {
 public:
  inline User() : User(nullptr) {}
  ~User() override;
  explicit PROTOBUF_CONSTEXPR User(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User& default_instance() {
    return *internal_default_instance();
  }
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const User& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const User& from) {
    User::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "friendProto.User";
  }
  protected:
  explicit User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kPasswordFieldNumber = 3,
    kIdFieldNumber = 1,
    kStateFieldNumber = 4,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes password = 3;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // .friendProto.STATE state = 4;
  void clear_state();
  ::friendProto::STATE state() const;
  void set_state(::friendProto::STATE value);
  private:
  ::friendProto::STATE _internal_state() const;
  void _internal_set_state(::friendProto::STATE value);
  public:

  // @@protoc_insertion_point(class_scope:friendProto.User)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    int32_t id_;
    int state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friendService_2eproto;
};
// -------------------------------------------------------------------

class UserInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:friendProto.UserInfoRequest) */ {
 public:
  inline UserInfoRequest() : UserInfoRequest(nullptr) {}
  ~UserInfoRequest() override;
  explicit PROTOBUF_CONSTEXPR UserInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserInfoRequest(const UserInfoRequest& from);
  UserInfoRequest(UserInfoRequest&& from) noexcept
    : UserInfoRequest() {
    *this = ::std::move(from);
  }

  inline UserInfoRequest& operator=(const UserInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfoRequest& operator=(UserInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserInfoRequest* internal_default_instance() {
    return reinterpret_cast<const UserInfoRequest*>(
               &_UserInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserInfoRequest& a, UserInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserInfoRequest& from) {
    UserInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "friendProto.UserInfoRequest";
  }
  protected:
  explicit UserInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 1,
  };
  // int32 userid = 1;
  void clear_userid();
  int32_t userid() const;
  void set_userid(int32_t value);
  private:
  int32_t _internal_userid() const;
  void _internal_set_userid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:friendProto.UserInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t userid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friendService_2eproto;
};
// -------------------------------------------------------------------

class UserInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:friendProto.UserInfoResponse) */ {
 public:
  inline UserInfoResponse() : UserInfoResponse(nullptr) {}
  ~UserInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR UserInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserInfoResponse(const UserInfoResponse& from);
  UserInfoResponse(UserInfoResponse&& from) noexcept
    : UserInfoResponse() {
    *this = ::std::move(from);
  }

  inline UserInfoResponse& operator=(const UserInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfoResponse& operator=(UserInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserInfoResponse* internal_default_instance() {
    return reinterpret_cast<const UserInfoResponse*>(
               &_UserInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserInfoResponse& a, UserInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserInfoResponse& from) {
    UserInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "friendProto.UserInfoResponse";
  }
  protected:
  explicit UserInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 2,
    kUserInfoFieldNumber = 3,
    kErrcodeFieldNumber = 1,
  };
  // bytes errmsg = 2;
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // .friendProto.User userInfo = 3;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::friendProto::User& userinfo() const;
  PROTOBUF_NODISCARD ::friendProto::User* release_userinfo();
  ::friendProto::User* mutable_userinfo();
  void set_allocated_userinfo(::friendProto::User* userinfo);
  private:
  const ::friendProto::User& _internal_userinfo() const;
  ::friendProto::User* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::friendProto::User* userinfo);
  ::friendProto::User* unsafe_arena_release_userinfo();

  // int32 errcode = 1;
  void clear_errcode();
  int32_t errcode() const;
  void set_errcode(int32_t value);
  private:
  int32_t _internal_errcode() const;
  void _internal_set_errcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:friendProto.UserInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
    ::friendProto::User* userinfo_;
    int32_t errcode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friendService_2eproto;
};
// -------------------------------------------------------------------

class FriendListRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:friendProto.FriendListRequest) */ {
 public:
  inline FriendListRequest() : FriendListRequest(nullptr) {}
  ~FriendListRequest() override;
  explicit PROTOBUF_CONSTEXPR FriendListRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FriendListRequest(const FriendListRequest& from);
  FriendListRequest(FriendListRequest&& from) noexcept
    : FriendListRequest() {
    *this = ::std::move(from);
  }

  inline FriendListRequest& operator=(const FriendListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendListRequest& operator=(FriendListRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendListRequest* internal_default_instance() {
    return reinterpret_cast<const FriendListRequest*>(
               &_FriendListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FriendListRequest& a, FriendListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendListRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FriendListRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FriendListRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FriendListRequest& from) {
    FriendListRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendListRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "friendProto.FriendListRequest";
  }
  protected:
  explicit FriendListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 1,
  };
  // int32 userid = 1;
  void clear_userid();
  int32_t userid() const;
  void set_userid(int32_t value);
  private:
  int32_t _internal_userid() const;
  void _internal_set_userid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:friendProto.FriendListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t userid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friendService_2eproto;
};
// -------------------------------------------------------------------

class FriendListResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:friendProto.FriendListResponse) */ {
 public:
  inline FriendListResponse() : FriendListResponse(nullptr) {}
  ~FriendListResponse() override;
  explicit PROTOBUF_CONSTEXPR FriendListResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FriendListResponse(const FriendListResponse& from);
  FriendListResponse(FriendListResponse&& from) noexcept
    : FriendListResponse() {
    *this = ::std::move(from);
  }

  inline FriendListResponse& operator=(const FriendListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendListResponse& operator=(FriendListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendListResponse* internal_default_instance() {
    return reinterpret_cast<const FriendListResponse*>(
               &_FriendListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FriendListResponse& a, FriendListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendListResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FriendListResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FriendListResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FriendListResponse& from) {
    FriendListResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendListResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "friendProto.FriendListResponse";
  }
  protected:
  explicit FriendListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendListFieldNumber = 3,
    kErrmsgFieldNumber = 2,
    kErrcodeFieldNumber = 1,
  };
  // repeated .friendProto.User friendList = 3;
  int friendlist_size() const;
  private:
  int _internal_friendlist_size() const;
  public:
  void clear_friendlist();
  ::friendProto::User* mutable_friendlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::friendProto::User >*
      mutable_friendlist();
  private:
  const ::friendProto::User& _internal_friendlist(int index) const;
  ::friendProto::User* _internal_add_friendlist();
  public:
  const ::friendProto::User& friendlist(int index) const;
  ::friendProto::User* add_friendlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::friendProto::User >&
      friendlist() const;

  // bytes errmsg = 2;
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // int32 errcode = 1;
  void clear_errcode();
  int32_t errcode() const;
  void set_errcode(int32_t value);
  private:
  int32_t _internal_errcode() const;
  void _internal_set_errcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:friendProto.FriendListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::friendProto::User > friendlist_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
    int32_t errcode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friendService_2eproto;
};
// -------------------------------------------------------------------

class AddFriendRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:friendProto.AddFriendRequest) */ {
 public:
  inline AddFriendRequest() : AddFriendRequest(nullptr) {}
  ~AddFriendRequest() override;
  explicit PROTOBUF_CONSTEXPR AddFriendRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddFriendRequest(const AddFriendRequest& from);
  AddFriendRequest(AddFriendRequest&& from) noexcept
    : AddFriendRequest() {
    *this = ::std::move(from);
  }

  inline AddFriendRequest& operator=(const AddFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFriendRequest& operator=(AddFriendRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddFriendRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddFriendRequest* internal_default_instance() {
    return reinterpret_cast<const AddFriendRequest*>(
               &_AddFriendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AddFriendRequest& a, AddFriendRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddFriendRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddFriendRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddFriendRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddFriendRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddFriendRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddFriendRequest& from) {
    AddFriendRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFriendRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "friendProto.AddFriendRequest";
  }
  protected:
  explicit AddFriendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 1,
    kFriendidFieldNumber = 2,
  };
  // int32 userid = 1;
  void clear_userid();
  int32_t userid() const;
  void set_userid(int32_t value);
  private:
  int32_t _internal_userid() const;
  void _internal_set_userid(int32_t value);
  public:

  // int32 friendid = 2;
  void clear_friendid();
  int32_t friendid() const;
  void set_friendid(int32_t value);
  private:
  int32_t _internal_friendid() const;
  void _internal_set_friendid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:friendProto.AddFriendRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t userid_;
    int32_t friendid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friendService_2eproto;
};
// -------------------------------------------------------------------

class AddFriendResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:friendProto.AddFriendResponse) */ {
 public:
  inline AddFriendResponse() : AddFriendResponse(nullptr) {}
  ~AddFriendResponse() override;
  explicit PROTOBUF_CONSTEXPR AddFriendResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddFriendResponse(const AddFriendResponse& from);
  AddFriendResponse(AddFriendResponse&& from) noexcept
    : AddFriendResponse() {
    *this = ::std::move(from);
  }

  inline AddFriendResponse& operator=(const AddFriendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFriendResponse& operator=(AddFriendResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddFriendResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddFriendResponse* internal_default_instance() {
    return reinterpret_cast<const AddFriendResponse*>(
               &_AddFriendResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AddFriendResponse& a, AddFriendResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddFriendResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddFriendResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddFriendResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddFriendResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddFriendResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddFriendResponse& from) {
    AddFriendResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFriendResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "friendProto.AddFriendResponse";
  }
  protected:
  explicit AddFriendResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 2,
    kErrcodeFieldNumber = 1,
  };
  // bytes errmsg = 2;
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // int32 errcode = 1;
  void clear_errcode();
  int32_t errcode() const;
  void set_errcode(int32_t value);
  private:
  int32_t _internal_errcode() const;
  void _internal_set_errcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:friendProto.AddFriendResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
    int32_t errcode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friendService_2eproto;
};
// -------------------------------------------------------------------

class DelFriendRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:friendProto.DelFriendRequest) */ {
 public:
  inline DelFriendRequest() : DelFriendRequest(nullptr) {}
  ~DelFriendRequest() override;
  explicit PROTOBUF_CONSTEXPR DelFriendRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DelFriendRequest(const DelFriendRequest& from);
  DelFriendRequest(DelFriendRequest&& from) noexcept
    : DelFriendRequest() {
    *this = ::std::move(from);
  }

  inline DelFriendRequest& operator=(const DelFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelFriendRequest& operator=(DelFriendRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DelFriendRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DelFriendRequest* internal_default_instance() {
    return reinterpret_cast<const DelFriendRequest*>(
               &_DelFriendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DelFriendRequest& a, DelFriendRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DelFriendRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelFriendRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DelFriendRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DelFriendRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DelFriendRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DelFriendRequest& from) {
    DelFriendRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelFriendRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "friendProto.DelFriendRequest";
  }
  protected:
  explicit DelFriendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 1,
    kFriendidFieldNumber = 2,
  };
  // int32 userid = 1;
  void clear_userid();
  int32_t userid() const;
  void set_userid(int32_t value);
  private:
  int32_t _internal_userid() const;
  void _internal_set_userid(int32_t value);
  public:

  // int32 friendid = 2;
  void clear_friendid();
  int32_t friendid() const;
  void set_friendid(int32_t value);
  private:
  int32_t _internal_friendid() const;
  void _internal_set_friendid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:friendProto.DelFriendRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t userid_;
    int32_t friendid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friendService_2eproto;
};
// -------------------------------------------------------------------

class DelFriendResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:friendProto.DelFriendResponse) */ {
 public:
  inline DelFriendResponse() : DelFriendResponse(nullptr) {}
  ~DelFriendResponse() override;
  explicit PROTOBUF_CONSTEXPR DelFriendResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DelFriendResponse(const DelFriendResponse& from);
  DelFriendResponse(DelFriendResponse&& from) noexcept
    : DelFriendResponse() {
    *this = ::std::move(from);
  }

  inline DelFriendResponse& operator=(const DelFriendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelFriendResponse& operator=(DelFriendResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DelFriendResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DelFriendResponse* internal_default_instance() {
    return reinterpret_cast<const DelFriendResponse*>(
               &_DelFriendResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DelFriendResponse& a, DelFriendResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DelFriendResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelFriendResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DelFriendResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DelFriendResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DelFriendResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DelFriendResponse& from) {
    DelFriendResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelFriendResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "friendProto.DelFriendResponse";
  }
  protected:
  explicit DelFriendResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 2,
    kErrcodeFieldNumber = 1,
  };
  // bytes errmsg = 2;
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // int32 errcode = 1;
  void clear_errcode();
  int32_t errcode() const;
  void set_errcode(int32_t value);
  private:
  int32_t _internal_errcode() const;
  void _internal_set_errcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:friendProto.DelFriendResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
    int32_t errcode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_friendService_2eproto;
};
// ===================================================================

class FriendServiceRpc_Stub;

class FriendServiceRpc : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline FriendServiceRpc() {};
 public:
  virtual ~FriendServiceRpc();

  typedef FriendServiceRpc_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void GetUserInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::friendProto::UserInfoRequest* request,
                       ::friendProto::UserInfoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void AddFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::friendProto::AddFriendRequest* request,
                       ::friendProto::AddFriendResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void DeleteFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::friendProto::DelFriendRequest* request,
                       ::friendProto::DelFriendResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetFriendList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::friendProto::FriendListRequest* request,
                       ::friendProto::FriendListResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FriendServiceRpc);
};

class FriendServiceRpc_Stub : public FriendServiceRpc {
 public:
  FriendServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  FriendServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~FriendServiceRpc_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements FriendServiceRpc ------------------------------------------

  void GetUserInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::friendProto::UserInfoRequest* request,
                       ::friendProto::UserInfoResponse* response,
                       ::google::protobuf::Closure* done);
  void AddFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::friendProto::AddFriendRequest* request,
                       ::friendProto::AddFriendResponse* response,
                       ::google::protobuf::Closure* done);
  void DeleteFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::friendProto::DelFriendRequest* request,
                       ::friendProto::DelFriendResponse* response,
                       ::google::protobuf::Closure* done);
  void GetFriendList(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::friendProto::FriendListRequest* request,
                       ::friendProto::FriendListResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(FriendServiceRpc_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// User

// int32 id = 1;
inline void User::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t User::_internal_id() const {
  return _impl_.id_;
}
inline int32_t User::id() const {
  // @@protoc_insertion_point(field_get:friendProto.User.id)
  return _internal_id();
}
inline void User::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void User::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:friendProto.User.id)
}

// bytes name = 2;
inline void User::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& User::name() const {
  // @@protoc_insertion_point(field_get:friendProto.User.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:friendProto.User.name)
}
inline std::string* User::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:friendProto.User.name)
  return _s;
}
inline const std::string& User::_internal_name() const {
  return _impl_.name_.Get();
}
inline void User::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* User::release_name() {
  // @@protoc_insertion_point(field_release:friendProto.User.name)
  return _impl_.name_.Release();
}
inline void User::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:friendProto.User.name)
}

// bytes password = 3;
inline void User::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& User::password() const {
  // @@protoc_insertion_point(field_get:friendProto.User.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:friendProto.User.password)
}
inline std::string* User::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:friendProto.User.password)
  return _s;
}
inline const std::string& User::_internal_password() const {
  return _impl_.password_.Get();
}
inline void User::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* User::release_password() {
  // @@protoc_insertion_point(field_release:friendProto.User.password)
  return _impl_.password_.Release();
}
inline void User::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:friendProto.User.password)
}

// .friendProto.STATE state = 4;
inline void User::clear_state() {
  _impl_.state_ = 0;
}
inline ::friendProto::STATE User::_internal_state() const {
  return static_cast< ::friendProto::STATE >(_impl_.state_);
}
inline ::friendProto::STATE User::state() const {
  // @@protoc_insertion_point(field_get:friendProto.User.state)
  return _internal_state();
}
inline void User::_internal_set_state(::friendProto::STATE value) {
  
  _impl_.state_ = value;
}
inline void User::set_state(::friendProto::STATE value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:friendProto.User.state)
}

// -------------------------------------------------------------------

// UserInfoRequest

// int32 userid = 1;
inline void UserInfoRequest::clear_userid() {
  _impl_.userid_ = 0;
}
inline int32_t UserInfoRequest::_internal_userid() const {
  return _impl_.userid_;
}
inline int32_t UserInfoRequest::userid() const {
  // @@protoc_insertion_point(field_get:friendProto.UserInfoRequest.userid)
  return _internal_userid();
}
inline void UserInfoRequest::_internal_set_userid(int32_t value) {
  
  _impl_.userid_ = value;
}
inline void UserInfoRequest::set_userid(int32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:friendProto.UserInfoRequest.userid)
}

// -------------------------------------------------------------------

// UserInfoResponse

// int32 errcode = 1;
inline void UserInfoResponse::clear_errcode() {
  _impl_.errcode_ = 0;
}
inline int32_t UserInfoResponse::_internal_errcode() const {
  return _impl_.errcode_;
}
inline int32_t UserInfoResponse::errcode() const {
  // @@protoc_insertion_point(field_get:friendProto.UserInfoResponse.errcode)
  return _internal_errcode();
}
inline void UserInfoResponse::_internal_set_errcode(int32_t value) {
  
  _impl_.errcode_ = value;
}
inline void UserInfoResponse::set_errcode(int32_t value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:friendProto.UserInfoResponse.errcode)
}

// bytes errmsg = 2;
inline void UserInfoResponse::clear_errmsg() {
  _impl_.errmsg_.ClearToEmpty();
}
inline const std::string& UserInfoResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:friendProto.UserInfoResponse.errmsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfoResponse::set_errmsg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.errmsg_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:friendProto.UserInfoResponse.errmsg)
}
inline std::string* UserInfoResponse::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:friendProto.UserInfoResponse.errmsg)
  return _s;
}
inline const std::string& UserInfoResponse::_internal_errmsg() const {
  return _impl_.errmsg_.Get();
}
inline void UserInfoResponse::_internal_set_errmsg(const std::string& value) {
  
  _impl_.errmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* UserInfoResponse::_internal_mutable_errmsg() {
  
  return _impl_.errmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* UserInfoResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:friendProto.UserInfoResponse.errmsg)
  return _impl_.errmsg_.Release();
}
inline void UserInfoResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  _impl_.errmsg_.SetAllocated(errmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errmsg_.IsDefault()) {
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:friendProto.UserInfoResponse.errmsg)
}

// .friendProto.User userInfo = 3;
inline bool UserInfoResponse::_internal_has_userinfo() const {
  return this != internal_default_instance() && _impl_.userinfo_ != nullptr;
}
inline bool UserInfoResponse::has_userinfo() const {
  return _internal_has_userinfo();
}
inline void UserInfoResponse::clear_userinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.userinfo_ != nullptr) {
    delete _impl_.userinfo_;
  }
  _impl_.userinfo_ = nullptr;
}
inline const ::friendProto::User& UserInfoResponse::_internal_userinfo() const {
  const ::friendProto::User* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::friendProto::User&>(
      ::friendProto::_User_default_instance_);
}
inline const ::friendProto::User& UserInfoResponse::userinfo() const {
  // @@protoc_insertion_point(field_get:friendProto.UserInfoResponse.userInfo)
  return _internal_userinfo();
}
inline void UserInfoResponse::unsafe_arena_set_allocated_userinfo(
    ::friendProto::User* userinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = userinfo;
  if (userinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:friendProto.UserInfoResponse.userInfo)
}
inline ::friendProto::User* UserInfoResponse::release_userinfo() {
  
  ::friendProto::User* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::friendProto::User* UserInfoResponse::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:friendProto.UserInfoResponse.userInfo)
  
  ::friendProto::User* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::friendProto::User* UserInfoResponse::_internal_mutable_userinfo() {
  
  if (_impl_.userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::friendProto::User>(GetArenaForAllocation());
    _impl_.userinfo_ = p;
  }
  return _impl_.userinfo_;
}
inline ::friendProto::User* UserInfoResponse::mutable_userinfo() {
  ::friendProto::User* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:friendProto.UserInfoResponse.userInfo)
  return _msg;
}
inline void UserInfoResponse::set_allocated_userinfo(::friendProto::User* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.userinfo_;
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(userinfo);
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:friendProto.UserInfoResponse.userInfo)
}

// -------------------------------------------------------------------

// FriendListRequest

// int32 userid = 1;
inline void FriendListRequest::clear_userid() {
  _impl_.userid_ = 0;
}
inline int32_t FriendListRequest::_internal_userid() const {
  return _impl_.userid_;
}
inline int32_t FriendListRequest::userid() const {
  // @@protoc_insertion_point(field_get:friendProto.FriendListRequest.userid)
  return _internal_userid();
}
inline void FriendListRequest::_internal_set_userid(int32_t value) {
  
  _impl_.userid_ = value;
}
inline void FriendListRequest::set_userid(int32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:friendProto.FriendListRequest.userid)
}

// -------------------------------------------------------------------

// FriendListResponse

// int32 errcode = 1;
inline void FriendListResponse::clear_errcode() {
  _impl_.errcode_ = 0;
}
inline int32_t FriendListResponse::_internal_errcode() const {
  return _impl_.errcode_;
}
inline int32_t FriendListResponse::errcode() const {
  // @@protoc_insertion_point(field_get:friendProto.FriendListResponse.errcode)
  return _internal_errcode();
}
inline void FriendListResponse::_internal_set_errcode(int32_t value) {
  
  _impl_.errcode_ = value;
}
inline void FriendListResponse::set_errcode(int32_t value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:friendProto.FriendListResponse.errcode)
}

// bytes errmsg = 2;
inline void FriendListResponse::clear_errmsg() {
  _impl_.errmsg_.ClearToEmpty();
}
inline const std::string& FriendListResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:friendProto.FriendListResponse.errmsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendListResponse::set_errmsg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.errmsg_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:friendProto.FriendListResponse.errmsg)
}
inline std::string* FriendListResponse::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:friendProto.FriendListResponse.errmsg)
  return _s;
}
inline const std::string& FriendListResponse::_internal_errmsg() const {
  return _impl_.errmsg_.Get();
}
inline void FriendListResponse::_internal_set_errmsg(const std::string& value) {
  
  _impl_.errmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendListResponse::_internal_mutable_errmsg() {
  
  return _impl_.errmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendListResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:friendProto.FriendListResponse.errmsg)
  return _impl_.errmsg_.Release();
}
inline void FriendListResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  _impl_.errmsg_.SetAllocated(errmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errmsg_.IsDefault()) {
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:friendProto.FriendListResponse.errmsg)
}

// repeated .friendProto.User friendList = 3;
inline int FriendListResponse::_internal_friendlist_size() const {
  return _impl_.friendlist_.size();
}
inline int FriendListResponse::friendlist_size() const {
  return _internal_friendlist_size();
}
inline void FriendListResponse::clear_friendlist() {
  _impl_.friendlist_.Clear();
}
inline ::friendProto::User* FriendListResponse::mutable_friendlist(int index) {
  // @@protoc_insertion_point(field_mutable:friendProto.FriendListResponse.friendList)
  return _impl_.friendlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::friendProto::User >*
FriendListResponse::mutable_friendlist() {
  // @@protoc_insertion_point(field_mutable_list:friendProto.FriendListResponse.friendList)
  return &_impl_.friendlist_;
}
inline const ::friendProto::User& FriendListResponse::_internal_friendlist(int index) const {
  return _impl_.friendlist_.Get(index);
}
inline const ::friendProto::User& FriendListResponse::friendlist(int index) const {
  // @@protoc_insertion_point(field_get:friendProto.FriendListResponse.friendList)
  return _internal_friendlist(index);
}
inline ::friendProto::User* FriendListResponse::_internal_add_friendlist() {
  return _impl_.friendlist_.Add();
}
inline ::friendProto::User* FriendListResponse::add_friendlist() {
  ::friendProto::User* _add = _internal_add_friendlist();
  // @@protoc_insertion_point(field_add:friendProto.FriendListResponse.friendList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::friendProto::User >&
FriendListResponse::friendlist() const {
  // @@protoc_insertion_point(field_list:friendProto.FriendListResponse.friendList)
  return _impl_.friendlist_;
}

// -------------------------------------------------------------------

// AddFriendRequest

// int32 userid = 1;
inline void AddFriendRequest::clear_userid() {
  _impl_.userid_ = 0;
}
inline int32_t AddFriendRequest::_internal_userid() const {
  return _impl_.userid_;
}
inline int32_t AddFriendRequest::userid() const {
  // @@protoc_insertion_point(field_get:friendProto.AddFriendRequest.userid)
  return _internal_userid();
}
inline void AddFriendRequest::_internal_set_userid(int32_t value) {
  
  _impl_.userid_ = value;
}
inline void AddFriendRequest::set_userid(int32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:friendProto.AddFriendRequest.userid)
}

// int32 friendid = 2;
inline void AddFriendRequest::clear_friendid() {
  _impl_.friendid_ = 0;
}
inline int32_t AddFriendRequest::_internal_friendid() const {
  return _impl_.friendid_;
}
inline int32_t AddFriendRequest::friendid() const {
  // @@protoc_insertion_point(field_get:friendProto.AddFriendRequest.friendid)
  return _internal_friendid();
}
inline void AddFriendRequest::_internal_set_friendid(int32_t value) {
  
  _impl_.friendid_ = value;
}
inline void AddFriendRequest::set_friendid(int32_t value) {
  _internal_set_friendid(value);
  // @@protoc_insertion_point(field_set:friendProto.AddFriendRequest.friendid)
}

// -------------------------------------------------------------------

// AddFriendResponse

// int32 errcode = 1;
inline void AddFriendResponse::clear_errcode() {
  _impl_.errcode_ = 0;
}
inline int32_t AddFriendResponse::_internal_errcode() const {
  return _impl_.errcode_;
}
inline int32_t AddFriendResponse::errcode() const {
  // @@protoc_insertion_point(field_get:friendProto.AddFriendResponse.errcode)
  return _internal_errcode();
}
inline void AddFriendResponse::_internal_set_errcode(int32_t value) {
  
  _impl_.errcode_ = value;
}
inline void AddFriendResponse::set_errcode(int32_t value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:friendProto.AddFriendResponse.errcode)
}

// bytes errmsg = 2;
inline void AddFriendResponse::clear_errmsg() {
  _impl_.errmsg_.ClearToEmpty();
}
inline const std::string& AddFriendResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:friendProto.AddFriendResponse.errmsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddFriendResponse::set_errmsg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.errmsg_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:friendProto.AddFriendResponse.errmsg)
}
inline std::string* AddFriendResponse::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:friendProto.AddFriendResponse.errmsg)
  return _s;
}
inline const std::string& AddFriendResponse::_internal_errmsg() const {
  return _impl_.errmsg_.Get();
}
inline void AddFriendResponse::_internal_set_errmsg(const std::string& value) {
  
  _impl_.errmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* AddFriendResponse::_internal_mutable_errmsg() {
  
  return _impl_.errmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* AddFriendResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:friendProto.AddFriendResponse.errmsg)
  return _impl_.errmsg_.Release();
}
inline void AddFriendResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  _impl_.errmsg_.SetAllocated(errmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errmsg_.IsDefault()) {
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:friendProto.AddFriendResponse.errmsg)
}

// -------------------------------------------------------------------

// DelFriendRequest

// int32 userid = 1;
inline void DelFriendRequest::clear_userid() {
  _impl_.userid_ = 0;
}
inline int32_t DelFriendRequest::_internal_userid() const {
  return _impl_.userid_;
}
inline int32_t DelFriendRequest::userid() const {
  // @@protoc_insertion_point(field_get:friendProto.DelFriendRequest.userid)
  return _internal_userid();
}
inline void DelFriendRequest::_internal_set_userid(int32_t value) {
  
  _impl_.userid_ = value;
}
inline void DelFriendRequest::set_userid(int32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:friendProto.DelFriendRequest.userid)
}

// int32 friendid = 2;
inline void DelFriendRequest::clear_friendid() {
  _impl_.friendid_ = 0;
}
inline int32_t DelFriendRequest::_internal_friendid() const {
  return _impl_.friendid_;
}
inline int32_t DelFriendRequest::friendid() const {
  // @@protoc_insertion_point(field_get:friendProto.DelFriendRequest.friendid)
  return _internal_friendid();
}
inline void DelFriendRequest::_internal_set_friendid(int32_t value) {
  
  _impl_.friendid_ = value;
}
inline void DelFriendRequest::set_friendid(int32_t value) {
  _internal_set_friendid(value);
  // @@protoc_insertion_point(field_set:friendProto.DelFriendRequest.friendid)
}

// -------------------------------------------------------------------

// DelFriendResponse

// int32 errcode = 1;
inline void DelFriendResponse::clear_errcode() {
  _impl_.errcode_ = 0;
}
inline int32_t DelFriendResponse::_internal_errcode() const {
  return _impl_.errcode_;
}
inline int32_t DelFriendResponse::errcode() const {
  // @@protoc_insertion_point(field_get:friendProto.DelFriendResponse.errcode)
  return _internal_errcode();
}
inline void DelFriendResponse::_internal_set_errcode(int32_t value) {
  
  _impl_.errcode_ = value;
}
inline void DelFriendResponse::set_errcode(int32_t value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:friendProto.DelFriendResponse.errcode)
}

// bytes errmsg = 2;
inline void DelFriendResponse::clear_errmsg() {
  _impl_.errmsg_.ClearToEmpty();
}
inline const std::string& DelFriendResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:friendProto.DelFriendResponse.errmsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DelFriendResponse::set_errmsg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.errmsg_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:friendProto.DelFriendResponse.errmsg)
}
inline std::string* DelFriendResponse::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:friendProto.DelFriendResponse.errmsg)
  return _s;
}
inline const std::string& DelFriendResponse::_internal_errmsg() const {
  return _impl_.errmsg_.Get();
}
inline void DelFriendResponse::_internal_set_errmsg(const std::string& value) {
  
  _impl_.errmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* DelFriendResponse::_internal_mutable_errmsg() {
  
  return _impl_.errmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* DelFriendResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:friendProto.DelFriendResponse.errmsg)
  return _impl_.errmsg_.Release();
}
inline void DelFriendResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  _impl_.errmsg_.SetAllocated(errmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errmsg_.IsDefault()) {
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:friendProto.DelFriendResponse.errmsg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace friendProto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::friendProto::STATE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::friendProto::STATE>() {
  return ::friendProto::STATE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_friendService_2eproto
