// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: groupService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_groupService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_groupService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_groupService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_groupService_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_groupService_2eproto;
namespace groupProto {
class CreateGroupRequest;
struct CreateGroupRequestDefaultTypeInternal;
extern CreateGroupRequestDefaultTypeInternal _CreateGroupRequest_default_instance_;
class CreateGroupResponse;
struct CreateGroupResponseDefaultTypeInternal;
extern CreateGroupResponseDefaultTypeInternal _CreateGroupResponse_default_instance_;
class Group;
struct GroupDefaultTypeInternal;
extern GroupDefaultTypeInternal _Group_default_instance_;
class GroupUser;
struct GroupUserDefaultTypeInternal;
extern GroupUserDefaultTypeInternal _GroupUser_default_instance_;
class JoinGroupRequest;
struct JoinGroupRequestDefaultTypeInternal;
extern JoinGroupRequestDefaultTypeInternal _JoinGroupRequest_default_instance_;
class JoinGroupResponse;
struct JoinGroupResponseDefaultTypeInternal;
extern JoinGroupResponseDefaultTypeInternal _JoinGroupResponse_default_instance_;
class QueryGroupUsersRequest;
struct QueryGroupUsersRequestDefaultTypeInternal;
extern QueryGroupUsersRequestDefaultTypeInternal _QueryGroupUsersRequest_default_instance_;
class QueryGroupUsersResponse;
struct QueryGroupUsersResponseDefaultTypeInternal;
extern QueryGroupUsersResponseDefaultTypeInternal _QueryGroupUsersResponse_default_instance_;
class QueryGroupsRequest;
struct QueryGroupsRequestDefaultTypeInternal;
extern QueryGroupsRequestDefaultTypeInternal _QueryGroupsRequest_default_instance_;
class QueryGroupsResponse;
struct QueryGroupsResponseDefaultTypeInternal;
extern QueryGroupsResponseDefaultTypeInternal _QueryGroupsResponse_default_instance_;
class QuitGroupRequest;
struct QuitGroupRequestDefaultTypeInternal;
extern QuitGroupRequestDefaultTypeInternal _QuitGroupRequest_default_instance_;
class QuitGroupResponse;
struct QuitGroupResponseDefaultTypeInternal;
extern QuitGroupResponseDefaultTypeInternal _QuitGroupResponse_default_instance_;
}  // namespace groupProto
PROTOBUF_NAMESPACE_OPEN
template<> ::groupProto::CreateGroupRequest* Arena::CreateMaybeMessage<::groupProto::CreateGroupRequest>(Arena*);
template<> ::groupProto::CreateGroupResponse* Arena::CreateMaybeMessage<::groupProto::CreateGroupResponse>(Arena*);
template<> ::groupProto::Group* Arena::CreateMaybeMessage<::groupProto::Group>(Arena*);
template<> ::groupProto::GroupUser* Arena::CreateMaybeMessage<::groupProto::GroupUser>(Arena*);
template<> ::groupProto::JoinGroupRequest* Arena::CreateMaybeMessage<::groupProto::JoinGroupRequest>(Arena*);
template<> ::groupProto::JoinGroupResponse* Arena::CreateMaybeMessage<::groupProto::JoinGroupResponse>(Arena*);
template<> ::groupProto::QueryGroupUsersRequest* Arena::CreateMaybeMessage<::groupProto::QueryGroupUsersRequest>(Arena*);
template<> ::groupProto::QueryGroupUsersResponse* Arena::CreateMaybeMessage<::groupProto::QueryGroupUsersResponse>(Arena*);
template<> ::groupProto::QueryGroupsRequest* Arena::CreateMaybeMessage<::groupProto::QueryGroupsRequest>(Arena*);
template<> ::groupProto::QueryGroupsResponse* Arena::CreateMaybeMessage<::groupProto::QueryGroupsResponse>(Arena*);
template<> ::groupProto::QuitGroupRequest* Arena::CreateMaybeMessage<::groupProto::QuitGroupRequest>(Arena*);
template<> ::groupProto::QuitGroupResponse* Arena::CreateMaybeMessage<::groupProto::QuitGroupResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace groupProto {

enum ROLE : int {
  CREATOR = 0,
  NORMAL = 1,
  ROLE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ROLE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ROLE_IsValid(int value);
constexpr ROLE ROLE_MIN = CREATOR;
constexpr ROLE ROLE_MAX = NORMAL;
constexpr int ROLE_ARRAYSIZE = ROLE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ROLE_descriptor();
template<typename T>
inline const std::string& ROLE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ROLE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ROLE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ROLE_descriptor(), enum_t_value);
}
inline bool ROLE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ROLE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ROLE>(
    ROLE_descriptor(), name, value);
}
enum STATE : int {
  ONLINE = 0,
  OFFLINE = 1,
  STATE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  STATE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool STATE_IsValid(int value);
constexpr STATE STATE_MIN = ONLINE;
constexpr STATE STATE_MAX = OFFLINE;
constexpr int STATE_ARRAYSIZE = STATE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* STATE_descriptor();
template<typename T>
inline const std::string& STATE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, STATE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function STATE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    STATE_descriptor(), enum_t_value);
}
inline bool STATE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, STATE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<STATE>(
    STATE_descriptor(), name, value);
}
// ===================================================================

class CreateGroupRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:groupProto.CreateGroupRequest) */ {
 public:
  inline CreateGroupRequest() : CreateGroupRequest(nullptr) {}
  ~CreateGroupRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateGroupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateGroupRequest(const CreateGroupRequest& from);
  CreateGroupRequest(CreateGroupRequest&& from) noexcept
    : CreateGroupRequest() {
    *this = ::std::move(from);
  }

  inline CreateGroupRequest& operator=(const CreateGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateGroupRequest& operator=(CreateGroupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateGroupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateGroupRequest* internal_default_instance() {
    return reinterpret_cast<const CreateGroupRequest*>(
               &_CreateGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateGroupRequest& a, CreateGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateGroupRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateGroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateGroupRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateGroupRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateGroupRequest& from) {
    CreateGroupRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateGroupRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "groupProto.CreateGroupRequest";
  }
  protected:
  explicit CreateGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupNameFieldNumber = 2,
    kGroupDescFieldNumber = 3,
    kUseridFieldNumber = 1,
  };
  // bytes group_name = 2;
  void clear_group_name();
  const std::string& group_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_name();
  PROTOBUF_NODISCARD std::string* release_group_name();
  void set_allocated_group_name(std::string* group_name);
  private:
  const std::string& _internal_group_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_name(const std::string& value);
  std::string* _internal_mutable_group_name();
  public:

  // bytes group_desc = 3;
  void clear_group_desc();
  const std::string& group_desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_desc();
  PROTOBUF_NODISCARD std::string* release_group_desc();
  void set_allocated_group_desc(std::string* group_desc);
  private:
  const std::string& _internal_group_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_desc(const std::string& value);
  std::string* _internal_mutable_group_desc();
  public:

  // int32 userid = 1;
  void clear_userid();
  int32_t userid() const;
  void set_userid(int32_t value);
  private:
  int32_t _internal_userid() const;
  void _internal_set_userid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:groupProto.CreateGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_desc_;
    int32_t userid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_groupService_2eproto;
};
// -------------------------------------------------------------------

class CreateGroupResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:groupProto.CreateGroupResponse) */ {
 public:
  inline CreateGroupResponse() : CreateGroupResponse(nullptr) {}
  ~CreateGroupResponse() override;
  explicit PROTOBUF_CONSTEXPR CreateGroupResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateGroupResponse(const CreateGroupResponse& from);
  CreateGroupResponse(CreateGroupResponse&& from) noexcept
    : CreateGroupResponse() {
    *this = ::std::move(from);
  }

  inline CreateGroupResponse& operator=(const CreateGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateGroupResponse& operator=(CreateGroupResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateGroupResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateGroupResponse* internal_default_instance() {
    return reinterpret_cast<const CreateGroupResponse*>(
               &_CreateGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateGroupResponse& a, CreateGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateGroupResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateGroupResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateGroupResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateGroupResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateGroupResponse& from) {
    CreateGroupResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateGroupResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "groupProto.CreateGroupResponse";
  }
  protected:
  explicit CreateGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 2,
    kErrcodeFieldNumber = 1,
    kGroupidFieldNumber = 3,
  };
  // bytes errmsg = 2;
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // int32 errcode = 1;
  void clear_errcode();
  int32_t errcode() const;
  void set_errcode(int32_t value);
  private:
  int32_t _internal_errcode() const;
  void _internal_set_errcode(int32_t value);
  public:

  // int32 groupid = 3;
  void clear_groupid();
  int32_t groupid() const;
  void set_groupid(int32_t value);
  private:
  int32_t _internal_groupid() const;
  void _internal_set_groupid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:groupProto.CreateGroupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
    int32_t errcode_;
    int32_t groupid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_groupService_2eproto;
};
// -------------------------------------------------------------------

class JoinGroupRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:groupProto.JoinGroupRequest) */ {
 public:
  inline JoinGroupRequest() : JoinGroupRequest(nullptr) {}
  ~JoinGroupRequest() override;
  explicit PROTOBUF_CONSTEXPR JoinGroupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinGroupRequest(const JoinGroupRequest& from);
  JoinGroupRequest(JoinGroupRequest&& from) noexcept
    : JoinGroupRequest() {
    *this = ::std::move(from);
  }

  inline JoinGroupRequest& operator=(const JoinGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinGroupRequest& operator=(JoinGroupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JoinGroupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinGroupRequest* internal_default_instance() {
    return reinterpret_cast<const JoinGroupRequest*>(
               &_JoinGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(JoinGroupRequest& a, JoinGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinGroupRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinGroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JoinGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JoinGroupRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JoinGroupRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JoinGroupRequest& from) {
    JoinGroupRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinGroupRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "groupProto.JoinGroupRequest";
  }
  protected:
  explicit JoinGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 1,
    kGroupidFieldNumber = 2,
    kRoleFieldNumber = 3,
  };
  // int32 userid = 1;
  void clear_userid();
  int32_t userid() const;
  void set_userid(int32_t value);
  private:
  int32_t _internal_userid() const;
  void _internal_set_userid(int32_t value);
  public:

  // int32 groupid = 2;
  void clear_groupid();
  int32_t groupid() const;
  void set_groupid(int32_t value);
  private:
  int32_t _internal_groupid() const;
  void _internal_set_groupid(int32_t value);
  public:

  // .groupProto.ROLE role = 3;
  void clear_role();
  ::groupProto::ROLE role() const;
  void set_role(::groupProto::ROLE value);
  private:
  ::groupProto::ROLE _internal_role() const;
  void _internal_set_role(::groupProto::ROLE value);
  public:

  // @@protoc_insertion_point(class_scope:groupProto.JoinGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t userid_;
    int32_t groupid_;
    int role_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_groupService_2eproto;
};
// -------------------------------------------------------------------

class JoinGroupResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:groupProto.JoinGroupResponse) */ {
 public:
  inline JoinGroupResponse() : JoinGroupResponse(nullptr) {}
  ~JoinGroupResponse() override;
  explicit PROTOBUF_CONSTEXPR JoinGroupResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinGroupResponse(const JoinGroupResponse& from);
  JoinGroupResponse(JoinGroupResponse&& from) noexcept
    : JoinGroupResponse() {
    *this = ::std::move(from);
  }

  inline JoinGroupResponse& operator=(const JoinGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinGroupResponse& operator=(JoinGroupResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JoinGroupResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinGroupResponse* internal_default_instance() {
    return reinterpret_cast<const JoinGroupResponse*>(
               &_JoinGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(JoinGroupResponse& a, JoinGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinGroupResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinGroupResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JoinGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JoinGroupResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JoinGroupResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JoinGroupResponse& from) {
    JoinGroupResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinGroupResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "groupProto.JoinGroupResponse";
  }
  protected:
  explicit JoinGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 2,
    kErrcodeFieldNumber = 1,
  };
  // bytes errmsg = 2;
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // int32 errcode = 1;
  void clear_errcode();
  int32_t errcode() const;
  void set_errcode(int32_t value);
  private:
  int32_t _internal_errcode() const;
  void _internal_set_errcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:groupProto.JoinGroupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
    int32_t errcode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_groupService_2eproto;
};
// -------------------------------------------------------------------

class QuitGroupRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:groupProto.QuitGroupRequest) */ {
 public:
  inline QuitGroupRequest() : QuitGroupRequest(nullptr) {}
  ~QuitGroupRequest() override;
  explicit PROTOBUF_CONSTEXPR QuitGroupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuitGroupRequest(const QuitGroupRequest& from);
  QuitGroupRequest(QuitGroupRequest&& from) noexcept
    : QuitGroupRequest() {
    *this = ::std::move(from);
  }

  inline QuitGroupRequest& operator=(const QuitGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuitGroupRequest& operator=(QuitGroupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuitGroupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuitGroupRequest* internal_default_instance() {
    return reinterpret_cast<const QuitGroupRequest*>(
               &_QuitGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(QuitGroupRequest& a, QuitGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QuitGroupRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuitGroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuitGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuitGroupRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QuitGroupRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QuitGroupRequest& from) {
    QuitGroupRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuitGroupRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "groupProto.QuitGroupRequest";
  }
  protected:
  explicit QuitGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 1,
    kGroupidFieldNumber = 2,
  };
  // int32 userid = 1;
  void clear_userid();
  int32_t userid() const;
  void set_userid(int32_t value);
  private:
  int32_t _internal_userid() const;
  void _internal_set_userid(int32_t value);
  public:

  // int32 groupid = 2;
  void clear_groupid();
  int32_t groupid() const;
  void set_groupid(int32_t value);
  private:
  int32_t _internal_groupid() const;
  void _internal_set_groupid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:groupProto.QuitGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t userid_;
    int32_t groupid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_groupService_2eproto;
};
// -------------------------------------------------------------------

class QuitGroupResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:groupProto.QuitGroupResponse) */ {
 public:
  inline QuitGroupResponse() : QuitGroupResponse(nullptr) {}
  ~QuitGroupResponse() override;
  explicit PROTOBUF_CONSTEXPR QuitGroupResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuitGroupResponse(const QuitGroupResponse& from);
  QuitGroupResponse(QuitGroupResponse&& from) noexcept
    : QuitGroupResponse() {
    *this = ::std::move(from);
  }

  inline QuitGroupResponse& operator=(const QuitGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuitGroupResponse& operator=(QuitGroupResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuitGroupResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuitGroupResponse* internal_default_instance() {
    return reinterpret_cast<const QuitGroupResponse*>(
               &_QuitGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(QuitGroupResponse& a, QuitGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QuitGroupResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuitGroupResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuitGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuitGroupResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QuitGroupResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QuitGroupResponse& from) {
    QuitGroupResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuitGroupResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "groupProto.QuitGroupResponse";
  }
  protected:
  explicit QuitGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 2,
    kErrcodeFieldNumber = 1,
  };
  // bytes errmsg = 2;
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // int32 errcode = 1;
  void clear_errcode();
  int32_t errcode() const;
  void set_errcode(int32_t value);
  private:
  int32_t _internal_errcode() const;
  void _internal_set_errcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:groupProto.QuitGroupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
    int32_t errcode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_groupService_2eproto;
};
// -------------------------------------------------------------------

class GroupUser final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:groupProto.GroupUser) */ {
 public:
  inline GroupUser() : GroupUser(nullptr) {}
  ~GroupUser() override;
  explicit PROTOBUF_CONSTEXPR GroupUser(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupUser(const GroupUser& from);
  GroupUser(GroupUser&& from) noexcept
    : GroupUser() {
    *this = ::std::move(from);
  }

  inline GroupUser& operator=(const GroupUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupUser& operator=(GroupUser&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupUser& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupUser* internal_default_instance() {
    return reinterpret_cast<const GroupUser*>(
               &_GroupUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GroupUser& a, GroupUser& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupUser* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupUser* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupUser>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupUser& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupUser& from) {
    GroupUser::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupUser* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "groupProto.GroupUser";
  }
  protected:
  explicit GroupUser(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kPasswordFieldNumber = 3,
    kIdFieldNumber = 1,
    kStateFieldNumber = 4,
    kRoleFieldNumber = 5,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes password = 3;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // .groupProto.STATE state = 4;
  void clear_state();
  ::groupProto::STATE state() const;
  void set_state(::groupProto::STATE value);
  private:
  ::groupProto::STATE _internal_state() const;
  void _internal_set_state(::groupProto::STATE value);
  public:

  // .groupProto.ROLE role = 5;
  void clear_role();
  ::groupProto::ROLE role() const;
  void set_role(::groupProto::ROLE value);
  private:
  ::groupProto::ROLE _internal_role() const;
  void _internal_set_role(::groupProto::ROLE value);
  public:

  // @@protoc_insertion_point(class_scope:groupProto.GroupUser)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    int32_t id_;
    int state_;
    int role_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_groupService_2eproto;
};
// -------------------------------------------------------------------

class Group final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:groupProto.Group) */ {
 public:
  inline Group() : Group(nullptr) {}
  ~Group() override;
  explicit PROTOBUF_CONSTEXPR Group(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Group(const Group& from);
  Group(Group&& from) noexcept
    : Group() {
    *this = ::std::move(from);
  }

  inline Group& operator=(const Group& from) {
    CopyFrom(from);
    return *this;
  }
  inline Group& operator=(Group&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Group& default_instance() {
    return *internal_default_instance();
  }
  static inline const Group* internal_default_instance() {
    return reinterpret_cast<const Group*>(
               &_Group_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Group& a, Group& b) {
    a.Swap(&b);
  }
  inline void Swap(Group* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Group* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Group* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Group>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Group& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Group& from) {
    Group::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Group* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "groupProto.Group";
  }
  protected:
  explicit Group(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 4,
    kNameFieldNumber = 2,
    kDescFieldNumber = 3,
    kGroupidFieldNumber = 1,
  };
  // repeated .groupProto.GroupUser users = 4;
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  ::groupProto::GroupUser* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::groupProto::GroupUser >*
      mutable_users();
  private:
  const ::groupProto::GroupUser& _internal_users(int index) const;
  ::groupProto::GroupUser* _internal_add_users();
  public:
  const ::groupProto::GroupUser& users(int index) const;
  ::groupProto::GroupUser* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::groupProto::GroupUser >&
      users() const;

  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes desc = 3;
  void clear_desc();
  const std::string& desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desc();
  PROTOBUF_NODISCARD std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // int32 groupid = 1;
  void clear_groupid();
  int32_t groupid() const;
  void set_groupid(int32_t value);
  private:
  int32_t _internal_groupid() const;
  void _internal_set_groupid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:groupProto.Group)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::groupProto::GroupUser > users_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
    int32_t groupid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_groupService_2eproto;
};
// -------------------------------------------------------------------

class QueryGroupsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:groupProto.QueryGroupsRequest) */ {
 public:
  inline QueryGroupsRequest() : QueryGroupsRequest(nullptr) {}
  ~QueryGroupsRequest() override;
  explicit PROTOBUF_CONSTEXPR QueryGroupsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryGroupsRequest(const QueryGroupsRequest& from);
  QueryGroupsRequest(QueryGroupsRequest&& from) noexcept
    : QueryGroupsRequest() {
    *this = ::std::move(from);
  }

  inline QueryGroupsRequest& operator=(const QueryGroupsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryGroupsRequest& operator=(QueryGroupsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryGroupsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryGroupsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryGroupsRequest*>(
               &_QueryGroupsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(QueryGroupsRequest& a, QueryGroupsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryGroupsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryGroupsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryGroupsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryGroupsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryGroupsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryGroupsRequest& from) {
    QueryGroupsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryGroupsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "groupProto.QueryGroupsRequest";
  }
  protected:
  explicit QueryGroupsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 1,
  };
  // int32 userid = 1;
  void clear_userid();
  int32_t userid() const;
  void set_userid(int32_t value);
  private:
  int32_t _internal_userid() const;
  void _internal_set_userid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:groupProto.QueryGroupsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t userid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_groupService_2eproto;
};
// -------------------------------------------------------------------

class QueryGroupsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:groupProto.QueryGroupsResponse) */ {
 public:
  inline QueryGroupsResponse() : QueryGroupsResponse(nullptr) {}
  ~QueryGroupsResponse() override;
  explicit PROTOBUF_CONSTEXPR QueryGroupsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryGroupsResponse(const QueryGroupsResponse& from);
  QueryGroupsResponse(QueryGroupsResponse&& from) noexcept
    : QueryGroupsResponse() {
    *this = ::std::move(from);
  }

  inline QueryGroupsResponse& operator=(const QueryGroupsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryGroupsResponse& operator=(QueryGroupsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryGroupsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryGroupsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryGroupsResponse*>(
               &_QueryGroupsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(QueryGroupsResponse& a, QueryGroupsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryGroupsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryGroupsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryGroupsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryGroupsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryGroupsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryGroupsResponse& from) {
    QueryGroupsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryGroupsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "groupProto.QueryGroupsResponse";
  }
  protected:
  explicit QueryGroupsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupsFieldNumber = 3,
    kErrmsgFieldNumber = 2,
    kErrcodeFieldNumber = 1,
  };
  // repeated .groupProto.Group groups = 3;
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  ::groupProto::Group* mutable_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::groupProto::Group >*
      mutable_groups();
  private:
  const ::groupProto::Group& _internal_groups(int index) const;
  ::groupProto::Group* _internal_add_groups();
  public:
  const ::groupProto::Group& groups(int index) const;
  ::groupProto::Group* add_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::groupProto::Group >&
      groups() const;

  // bytes errmsg = 2;
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // int32 errcode = 1;
  void clear_errcode();
  int32_t errcode() const;
  void set_errcode(int32_t value);
  private:
  int32_t _internal_errcode() const;
  void _internal_set_errcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:groupProto.QueryGroupsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::groupProto::Group > groups_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
    int32_t errcode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_groupService_2eproto;
};
// -------------------------------------------------------------------

class QueryGroupUsersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:groupProto.QueryGroupUsersRequest) */ {
 public:
  inline QueryGroupUsersRequest() : QueryGroupUsersRequest(nullptr) {}
  ~QueryGroupUsersRequest() override;
  explicit PROTOBUF_CONSTEXPR QueryGroupUsersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryGroupUsersRequest(const QueryGroupUsersRequest& from);
  QueryGroupUsersRequest(QueryGroupUsersRequest&& from) noexcept
    : QueryGroupUsersRequest() {
    *this = ::std::move(from);
  }

  inline QueryGroupUsersRequest& operator=(const QueryGroupUsersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryGroupUsersRequest& operator=(QueryGroupUsersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryGroupUsersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryGroupUsersRequest* internal_default_instance() {
    return reinterpret_cast<const QueryGroupUsersRequest*>(
               &_QueryGroupUsersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(QueryGroupUsersRequest& a, QueryGroupUsersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryGroupUsersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryGroupUsersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryGroupUsersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryGroupUsersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryGroupUsersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryGroupUsersRequest& from) {
    QueryGroupUsersRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryGroupUsersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "groupProto.QueryGroupUsersRequest";
  }
  protected:
  explicit QueryGroupUsersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 1,
    kGroupidFieldNumber = 2,
  };
  // int32 userid = 1;
  void clear_userid();
  int32_t userid() const;
  void set_userid(int32_t value);
  private:
  int32_t _internal_userid() const;
  void _internal_set_userid(int32_t value);
  public:

  // int32 groupid = 2;
  void clear_groupid();
  int32_t groupid() const;
  void set_groupid(int32_t value);
  private:
  int32_t _internal_groupid() const;
  void _internal_set_groupid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:groupProto.QueryGroupUsersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t userid_;
    int32_t groupid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_groupService_2eproto;
};
// -------------------------------------------------------------------

class QueryGroupUsersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:groupProto.QueryGroupUsersResponse) */ {
 public:
  inline QueryGroupUsersResponse() : QueryGroupUsersResponse(nullptr) {}
  ~QueryGroupUsersResponse() override;
  explicit PROTOBUF_CONSTEXPR QueryGroupUsersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryGroupUsersResponse(const QueryGroupUsersResponse& from);
  QueryGroupUsersResponse(QueryGroupUsersResponse&& from) noexcept
    : QueryGroupUsersResponse() {
    *this = ::std::move(from);
  }

  inline QueryGroupUsersResponse& operator=(const QueryGroupUsersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryGroupUsersResponse& operator=(QueryGroupUsersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryGroupUsersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryGroupUsersResponse* internal_default_instance() {
    return reinterpret_cast<const QueryGroupUsersResponse*>(
               &_QueryGroupUsersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(QueryGroupUsersResponse& a, QueryGroupUsersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryGroupUsersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryGroupUsersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryGroupUsersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryGroupUsersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryGroupUsersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryGroupUsersResponse& from) {
    QueryGroupUsersResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryGroupUsersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "groupProto.QueryGroupUsersResponse";
  }
  protected:
  explicit QueryGroupUsersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseridVecFieldNumber = 3,
    kErrmsgFieldNumber = 2,
    kErrcodeFieldNumber = 1,
  };
  // repeated int32 useridVec = 3;
  int useridvec_size() const;
  private:
  int _internal_useridvec_size() const;
  public:
  void clear_useridvec();
  private:
  int32_t _internal_useridvec(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_useridvec() const;
  void _internal_add_useridvec(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_useridvec();
  public:
  int32_t useridvec(int index) const;
  void set_useridvec(int index, int32_t value);
  void add_useridvec(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      useridvec() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_useridvec();

  // bytes errmsg = 2;
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // int32 errcode = 1;
  void clear_errcode();
  int32_t errcode() const;
  void set_errcode(int32_t value);
  private:
  int32_t _internal_errcode() const;
  void _internal_set_errcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:groupProto.QueryGroupUsersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > useridvec_;
    mutable std::atomic<int> _useridvec_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
    int32_t errcode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_groupService_2eproto;
};
// ===================================================================

class GroupServiceRpc_Stub;

class GroupServiceRpc : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline GroupServiceRpc() {};
 public:
  virtual ~GroupServiceRpc();

  typedef GroupServiceRpc_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void CreateGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::groupProto::CreateGroupRequest* request,
                       ::groupProto::CreateGroupResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void JoinGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::groupProto::JoinGroupRequest* request,
                       ::groupProto::JoinGroupResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void QuitGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::groupProto::QuitGroupRequest* request,
                       ::groupProto::QuitGroupResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void QueryGroups(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::groupProto::QueryGroupsRequest* request,
                       ::groupProto::QueryGroupsResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void QueryGroupUsers(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::groupProto::QueryGroupUsersRequest* request,
                       ::groupProto::QueryGroupUsersResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(GroupServiceRpc);
};

class GroupServiceRpc_Stub : public GroupServiceRpc {
 public:
  GroupServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  GroupServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~GroupServiceRpc_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements GroupServiceRpc ------------------------------------------

  void CreateGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::groupProto::CreateGroupRequest* request,
                       ::groupProto::CreateGroupResponse* response,
                       ::google::protobuf::Closure* done);
  void JoinGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::groupProto::JoinGroupRequest* request,
                       ::groupProto::JoinGroupResponse* response,
                       ::google::protobuf::Closure* done);
  void QuitGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::groupProto::QuitGroupRequest* request,
                       ::groupProto::QuitGroupResponse* response,
                       ::google::protobuf::Closure* done);
  void QueryGroups(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::groupProto::QueryGroupsRequest* request,
                       ::groupProto::QueryGroupsResponse* response,
                       ::google::protobuf::Closure* done);
  void QueryGroupUsers(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::groupProto::QueryGroupUsersRequest* request,
                       ::groupProto::QueryGroupUsersResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(GroupServiceRpc_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateGroupRequest

// int32 userid = 1;
inline void CreateGroupRequest::clear_userid() {
  _impl_.userid_ = 0;
}
inline int32_t CreateGroupRequest::_internal_userid() const {
  return _impl_.userid_;
}
inline int32_t CreateGroupRequest::userid() const {
  // @@protoc_insertion_point(field_get:groupProto.CreateGroupRequest.userid)
  return _internal_userid();
}
inline void CreateGroupRequest::_internal_set_userid(int32_t value) {
  
  _impl_.userid_ = value;
}
inline void CreateGroupRequest::set_userid(int32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:groupProto.CreateGroupRequest.userid)
}

// bytes group_name = 2;
inline void CreateGroupRequest::clear_group_name() {
  _impl_.group_name_.ClearToEmpty();
}
inline const std::string& CreateGroupRequest::group_name() const {
  // @@protoc_insertion_point(field_get:groupProto.CreateGroupRequest.group_name)
  return _internal_group_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateGroupRequest::set_group_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:groupProto.CreateGroupRequest.group_name)
}
inline std::string* CreateGroupRequest::mutable_group_name() {
  std::string* _s = _internal_mutable_group_name();
  // @@protoc_insertion_point(field_mutable:groupProto.CreateGroupRequest.group_name)
  return _s;
}
inline const std::string& CreateGroupRequest::_internal_group_name() const {
  return _impl_.group_name_.Get();
}
inline void CreateGroupRequest::_internal_set_group_name(const std::string& value) {
  
  _impl_.group_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateGroupRequest::_internal_mutable_group_name() {
  
  return _impl_.group_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateGroupRequest::release_group_name() {
  // @@protoc_insertion_point(field_release:groupProto.CreateGroupRequest.group_name)
  return _impl_.group_name_.Release();
}
inline void CreateGroupRequest::set_allocated_group_name(std::string* group_name) {
  if (group_name != nullptr) {
    
  } else {
    
  }
  _impl_.group_name_.SetAllocated(group_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_name_.IsDefault()) {
    _impl_.group_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:groupProto.CreateGroupRequest.group_name)
}

// bytes group_desc = 3;
inline void CreateGroupRequest::clear_group_desc() {
  _impl_.group_desc_.ClearToEmpty();
}
inline const std::string& CreateGroupRequest::group_desc() const {
  // @@protoc_insertion_point(field_get:groupProto.CreateGroupRequest.group_desc)
  return _internal_group_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateGroupRequest::set_group_desc(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_desc_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:groupProto.CreateGroupRequest.group_desc)
}
inline std::string* CreateGroupRequest::mutable_group_desc() {
  std::string* _s = _internal_mutable_group_desc();
  // @@protoc_insertion_point(field_mutable:groupProto.CreateGroupRequest.group_desc)
  return _s;
}
inline const std::string& CreateGroupRequest::_internal_group_desc() const {
  return _impl_.group_desc_.Get();
}
inline void CreateGroupRequest::_internal_set_group_desc(const std::string& value) {
  
  _impl_.group_desc_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateGroupRequest::_internal_mutable_group_desc() {
  
  return _impl_.group_desc_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateGroupRequest::release_group_desc() {
  // @@protoc_insertion_point(field_release:groupProto.CreateGroupRequest.group_desc)
  return _impl_.group_desc_.Release();
}
inline void CreateGroupRequest::set_allocated_group_desc(std::string* group_desc) {
  if (group_desc != nullptr) {
    
  } else {
    
  }
  _impl_.group_desc_.SetAllocated(group_desc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_desc_.IsDefault()) {
    _impl_.group_desc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:groupProto.CreateGroupRequest.group_desc)
}

// -------------------------------------------------------------------

// CreateGroupResponse

// int32 errcode = 1;
inline void CreateGroupResponse::clear_errcode() {
  _impl_.errcode_ = 0;
}
inline int32_t CreateGroupResponse::_internal_errcode() const {
  return _impl_.errcode_;
}
inline int32_t CreateGroupResponse::errcode() const {
  // @@protoc_insertion_point(field_get:groupProto.CreateGroupResponse.errcode)
  return _internal_errcode();
}
inline void CreateGroupResponse::_internal_set_errcode(int32_t value) {
  
  _impl_.errcode_ = value;
}
inline void CreateGroupResponse::set_errcode(int32_t value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:groupProto.CreateGroupResponse.errcode)
}

// bytes errmsg = 2;
inline void CreateGroupResponse::clear_errmsg() {
  _impl_.errmsg_.ClearToEmpty();
}
inline const std::string& CreateGroupResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:groupProto.CreateGroupResponse.errmsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateGroupResponse::set_errmsg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.errmsg_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:groupProto.CreateGroupResponse.errmsg)
}
inline std::string* CreateGroupResponse::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:groupProto.CreateGroupResponse.errmsg)
  return _s;
}
inline const std::string& CreateGroupResponse::_internal_errmsg() const {
  return _impl_.errmsg_.Get();
}
inline void CreateGroupResponse::_internal_set_errmsg(const std::string& value) {
  
  _impl_.errmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateGroupResponse::_internal_mutable_errmsg() {
  
  return _impl_.errmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateGroupResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:groupProto.CreateGroupResponse.errmsg)
  return _impl_.errmsg_.Release();
}
inline void CreateGroupResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  _impl_.errmsg_.SetAllocated(errmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errmsg_.IsDefault()) {
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:groupProto.CreateGroupResponse.errmsg)
}

// int32 groupid = 3;
inline void CreateGroupResponse::clear_groupid() {
  _impl_.groupid_ = 0;
}
inline int32_t CreateGroupResponse::_internal_groupid() const {
  return _impl_.groupid_;
}
inline int32_t CreateGroupResponse::groupid() const {
  // @@protoc_insertion_point(field_get:groupProto.CreateGroupResponse.groupid)
  return _internal_groupid();
}
inline void CreateGroupResponse::_internal_set_groupid(int32_t value) {
  
  _impl_.groupid_ = value;
}
inline void CreateGroupResponse::set_groupid(int32_t value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:groupProto.CreateGroupResponse.groupid)
}

// -------------------------------------------------------------------

// JoinGroupRequest

// int32 userid = 1;
inline void JoinGroupRequest::clear_userid() {
  _impl_.userid_ = 0;
}
inline int32_t JoinGroupRequest::_internal_userid() const {
  return _impl_.userid_;
}
inline int32_t JoinGroupRequest::userid() const {
  // @@protoc_insertion_point(field_get:groupProto.JoinGroupRequest.userid)
  return _internal_userid();
}
inline void JoinGroupRequest::_internal_set_userid(int32_t value) {
  
  _impl_.userid_ = value;
}
inline void JoinGroupRequest::set_userid(int32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:groupProto.JoinGroupRequest.userid)
}

// int32 groupid = 2;
inline void JoinGroupRequest::clear_groupid() {
  _impl_.groupid_ = 0;
}
inline int32_t JoinGroupRequest::_internal_groupid() const {
  return _impl_.groupid_;
}
inline int32_t JoinGroupRequest::groupid() const {
  // @@protoc_insertion_point(field_get:groupProto.JoinGroupRequest.groupid)
  return _internal_groupid();
}
inline void JoinGroupRequest::_internal_set_groupid(int32_t value) {
  
  _impl_.groupid_ = value;
}
inline void JoinGroupRequest::set_groupid(int32_t value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:groupProto.JoinGroupRequest.groupid)
}

// .groupProto.ROLE role = 3;
inline void JoinGroupRequest::clear_role() {
  _impl_.role_ = 0;
}
inline ::groupProto::ROLE JoinGroupRequest::_internal_role() const {
  return static_cast< ::groupProto::ROLE >(_impl_.role_);
}
inline ::groupProto::ROLE JoinGroupRequest::role() const {
  // @@protoc_insertion_point(field_get:groupProto.JoinGroupRequest.role)
  return _internal_role();
}
inline void JoinGroupRequest::_internal_set_role(::groupProto::ROLE value) {
  
  _impl_.role_ = value;
}
inline void JoinGroupRequest::set_role(::groupProto::ROLE value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:groupProto.JoinGroupRequest.role)
}

// -------------------------------------------------------------------

// JoinGroupResponse

// int32 errcode = 1;
inline void JoinGroupResponse::clear_errcode() {
  _impl_.errcode_ = 0;
}
inline int32_t JoinGroupResponse::_internal_errcode() const {
  return _impl_.errcode_;
}
inline int32_t JoinGroupResponse::errcode() const {
  // @@protoc_insertion_point(field_get:groupProto.JoinGroupResponse.errcode)
  return _internal_errcode();
}
inline void JoinGroupResponse::_internal_set_errcode(int32_t value) {
  
  _impl_.errcode_ = value;
}
inline void JoinGroupResponse::set_errcode(int32_t value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:groupProto.JoinGroupResponse.errcode)
}

// bytes errmsg = 2;
inline void JoinGroupResponse::clear_errmsg() {
  _impl_.errmsg_.ClearToEmpty();
}
inline const std::string& JoinGroupResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:groupProto.JoinGroupResponse.errmsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JoinGroupResponse::set_errmsg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.errmsg_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:groupProto.JoinGroupResponse.errmsg)
}
inline std::string* JoinGroupResponse::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:groupProto.JoinGroupResponse.errmsg)
  return _s;
}
inline const std::string& JoinGroupResponse::_internal_errmsg() const {
  return _impl_.errmsg_.Get();
}
inline void JoinGroupResponse::_internal_set_errmsg(const std::string& value) {
  
  _impl_.errmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* JoinGroupResponse::_internal_mutable_errmsg() {
  
  return _impl_.errmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* JoinGroupResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:groupProto.JoinGroupResponse.errmsg)
  return _impl_.errmsg_.Release();
}
inline void JoinGroupResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  _impl_.errmsg_.SetAllocated(errmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errmsg_.IsDefault()) {
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:groupProto.JoinGroupResponse.errmsg)
}

// -------------------------------------------------------------------

// QuitGroupRequest

// int32 userid = 1;
inline void QuitGroupRequest::clear_userid() {
  _impl_.userid_ = 0;
}
inline int32_t QuitGroupRequest::_internal_userid() const {
  return _impl_.userid_;
}
inline int32_t QuitGroupRequest::userid() const {
  // @@protoc_insertion_point(field_get:groupProto.QuitGroupRequest.userid)
  return _internal_userid();
}
inline void QuitGroupRequest::_internal_set_userid(int32_t value) {
  
  _impl_.userid_ = value;
}
inline void QuitGroupRequest::set_userid(int32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:groupProto.QuitGroupRequest.userid)
}

// int32 groupid = 2;
inline void QuitGroupRequest::clear_groupid() {
  _impl_.groupid_ = 0;
}
inline int32_t QuitGroupRequest::_internal_groupid() const {
  return _impl_.groupid_;
}
inline int32_t QuitGroupRequest::groupid() const {
  // @@protoc_insertion_point(field_get:groupProto.QuitGroupRequest.groupid)
  return _internal_groupid();
}
inline void QuitGroupRequest::_internal_set_groupid(int32_t value) {
  
  _impl_.groupid_ = value;
}
inline void QuitGroupRequest::set_groupid(int32_t value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:groupProto.QuitGroupRequest.groupid)
}

// -------------------------------------------------------------------

// QuitGroupResponse

// int32 errcode = 1;
inline void QuitGroupResponse::clear_errcode() {
  _impl_.errcode_ = 0;
}
inline int32_t QuitGroupResponse::_internal_errcode() const {
  return _impl_.errcode_;
}
inline int32_t QuitGroupResponse::errcode() const {
  // @@protoc_insertion_point(field_get:groupProto.QuitGroupResponse.errcode)
  return _internal_errcode();
}
inline void QuitGroupResponse::_internal_set_errcode(int32_t value) {
  
  _impl_.errcode_ = value;
}
inline void QuitGroupResponse::set_errcode(int32_t value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:groupProto.QuitGroupResponse.errcode)
}

// bytes errmsg = 2;
inline void QuitGroupResponse::clear_errmsg() {
  _impl_.errmsg_.ClearToEmpty();
}
inline const std::string& QuitGroupResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:groupProto.QuitGroupResponse.errmsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QuitGroupResponse::set_errmsg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.errmsg_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:groupProto.QuitGroupResponse.errmsg)
}
inline std::string* QuitGroupResponse::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:groupProto.QuitGroupResponse.errmsg)
  return _s;
}
inline const std::string& QuitGroupResponse::_internal_errmsg() const {
  return _impl_.errmsg_.Get();
}
inline void QuitGroupResponse::_internal_set_errmsg(const std::string& value) {
  
  _impl_.errmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* QuitGroupResponse::_internal_mutable_errmsg() {
  
  return _impl_.errmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* QuitGroupResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:groupProto.QuitGroupResponse.errmsg)
  return _impl_.errmsg_.Release();
}
inline void QuitGroupResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  _impl_.errmsg_.SetAllocated(errmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errmsg_.IsDefault()) {
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:groupProto.QuitGroupResponse.errmsg)
}

// -------------------------------------------------------------------

// GroupUser

// int32 id = 1;
inline void GroupUser::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t GroupUser::_internal_id() const {
  return _impl_.id_;
}
inline int32_t GroupUser::id() const {
  // @@protoc_insertion_point(field_get:groupProto.GroupUser.id)
  return _internal_id();
}
inline void GroupUser::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void GroupUser::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:groupProto.GroupUser.id)
}

// bytes name = 2;
inline void GroupUser::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GroupUser::name() const {
  // @@protoc_insertion_point(field_get:groupProto.GroupUser.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupUser::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:groupProto.GroupUser.name)
}
inline std::string* GroupUser::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:groupProto.GroupUser.name)
  return _s;
}
inline const std::string& GroupUser::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GroupUser::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupUser::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupUser::release_name() {
  // @@protoc_insertion_point(field_release:groupProto.GroupUser.name)
  return _impl_.name_.Release();
}
inline void GroupUser::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:groupProto.GroupUser.name)
}

// bytes password = 3;
inline void GroupUser::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& GroupUser::password() const {
  // @@protoc_insertion_point(field_get:groupProto.GroupUser.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupUser::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:groupProto.GroupUser.password)
}
inline std::string* GroupUser::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:groupProto.GroupUser.password)
  return _s;
}
inline const std::string& GroupUser::_internal_password() const {
  return _impl_.password_.Get();
}
inline void GroupUser::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupUser::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupUser::release_password() {
  // @@protoc_insertion_point(field_release:groupProto.GroupUser.password)
  return _impl_.password_.Release();
}
inline void GroupUser::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:groupProto.GroupUser.password)
}

// .groupProto.STATE state = 4;
inline void GroupUser::clear_state() {
  _impl_.state_ = 0;
}
inline ::groupProto::STATE GroupUser::_internal_state() const {
  return static_cast< ::groupProto::STATE >(_impl_.state_);
}
inline ::groupProto::STATE GroupUser::state() const {
  // @@protoc_insertion_point(field_get:groupProto.GroupUser.state)
  return _internal_state();
}
inline void GroupUser::_internal_set_state(::groupProto::STATE value) {
  
  _impl_.state_ = value;
}
inline void GroupUser::set_state(::groupProto::STATE value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:groupProto.GroupUser.state)
}

// .groupProto.ROLE role = 5;
inline void GroupUser::clear_role() {
  _impl_.role_ = 0;
}
inline ::groupProto::ROLE GroupUser::_internal_role() const {
  return static_cast< ::groupProto::ROLE >(_impl_.role_);
}
inline ::groupProto::ROLE GroupUser::role() const {
  // @@protoc_insertion_point(field_get:groupProto.GroupUser.role)
  return _internal_role();
}
inline void GroupUser::_internal_set_role(::groupProto::ROLE value) {
  
  _impl_.role_ = value;
}
inline void GroupUser::set_role(::groupProto::ROLE value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:groupProto.GroupUser.role)
}

// -------------------------------------------------------------------

// Group

// int32 groupid = 1;
inline void Group::clear_groupid() {
  _impl_.groupid_ = 0;
}
inline int32_t Group::_internal_groupid() const {
  return _impl_.groupid_;
}
inline int32_t Group::groupid() const {
  // @@protoc_insertion_point(field_get:groupProto.Group.groupid)
  return _internal_groupid();
}
inline void Group::_internal_set_groupid(int32_t value) {
  
  _impl_.groupid_ = value;
}
inline void Group::set_groupid(int32_t value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:groupProto.Group.groupid)
}

// bytes name = 2;
inline void Group::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Group::name() const {
  // @@protoc_insertion_point(field_get:groupProto.Group.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Group::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:groupProto.Group.name)
}
inline std::string* Group::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:groupProto.Group.name)
  return _s;
}
inline const std::string& Group::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Group::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Group::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Group::release_name() {
  // @@protoc_insertion_point(field_release:groupProto.Group.name)
  return _impl_.name_.Release();
}
inline void Group::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:groupProto.Group.name)
}

// bytes desc = 3;
inline void Group::clear_desc() {
  _impl_.desc_.ClearToEmpty();
}
inline const std::string& Group::desc() const {
  // @@protoc_insertion_point(field_get:groupProto.Group.desc)
  return _internal_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Group::set_desc(ArgT0&& arg0, ArgT... args) {
 
 _impl_.desc_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:groupProto.Group.desc)
}
inline std::string* Group::mutable_desc() {
  std::string* _s = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:groupProto.Group.desc)
  return _s;
}
inline const std::string& Group::_internal_desc() const {
  return _impl_.desc_.Get();
}
inline void Group::_internal_set_desc(const std::string& value) {
  
  _impl_.desc_.Set(value, GetArenaForAllocation());
}
inline std::string* Group::_internal_mutable_desc() {
  
  return _impl_.desc_.Mutable(GetArenaForAllocation());
}
inline std::string* Group::release_desc() {
  // @@protoc_insertion_point(field_release:groupProto.Group.desc)
  return _impl_.desc_.Release();
}
inline void Group::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  _impl_.desc_.SetAllocated(desc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.desc_.IsDefault()) {
    _impl_.desc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:groupProto.Group.desc)
}

// repeated .groupProto.GroupUser users = 4;
inline int Group::_internal_users_size() const {
  return _impl_.users_.size();
}
inline int Group::users_size() const {
  return _internal_users_size();
}
inline void Group::clear_users() {
  _impl_.users_.Clear();
}
inline ::groupProto::GroupUser* Group::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:groupProto.Group.users)
  return _impl_.users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::groupProto::GroupUser >*
Group::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:groupProto.Group.users)
  return &_impl_.users_;
}
inline const ::groupProto::GroupUser& Group::_internal_users(int index) const {
  return _impl_.users_.Get(index);
}
inline const ::groupProto::GroupUser& Group::users(int index) const {
  // @@protoc_insertion_point(field_get:groupProto.Group.users)
  return _internal_users(index);
}
inline ::groupProto::GroupUser* Group::_internal_add_users() {
  return _impl_.users_.Add();
}
inline ::groupProto::GroupUser* Group::add_users() {
  ::groupProto::GroupUser* _add = _internal_add_users();
  // @@protoc_insertion_point(field_add:groupProto.Group.users)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::groupProto::GroupUser >&
Group::users() const {
  // @@protoc_insertion_point(field_list:groupProto.Group.users)
  return _impl_.users_;
}

// -------------------------------------------------------------------

// QueryGroupsRequest

// int32 userid = 1;
inline void QueryGroupsRequest::clear_userid() {
  _impl_.userid_ = 0;
}
inline int32_t QueryGroupsRequest::_internal_userid() const {
  return _impl_.userid_;
}
inline int32_t QueryGroupsRequest::userid() const {
  // @@protoc_insertion_point(field_get:groupProto.QueryGroupsRequest.userid)
  return _internal_userid();
}
inline void QueryGroupsRequest::_internal_set_userid(int32_t value) {
  
  _impl_.userid_ = value;
}
inline void QueryGroupsRequest::set_userid(int32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:groupProto.QueryGroupsRequest.userid)
}

// -------------------------------------------------------------------

// QueryGroupsResponse

// int32 errcode = 1;
inline void QueryGroupsResponse::clear_errcode() {
  _impl_.errcode_ = 0;
}
inline int32_t QueryGroupsResponse::_internal_errcode() const {
  return _impl_.errcode_;
}
inline int32_t QueryGroupsResponse::errcode() const {
  // @@protoc_insertion_point(field_get:groupProto.QueryGroupsResponse.errcode)
  return _internal_errcode();
}
inline void QueryGroupsResponse::_internal_set_errcode(int32_t value) {
  
  _impl_.errcode_ = value;
}
inline void QueryGroupsResponse::set_errcode(int32_t value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:groupProto.QueryGroupsResponse.errcode)
}

// bytes errmsg = 2;
inline void QueryGroupsResponse::clear_errmsg() {
  _impl_.errmsg_.ClearToEmpty();
}
inline const std::string& QueryGroupsResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:groupProto.QueryGroupsResponse.errmsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryGroupsResponse::set_errmsg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.errmsg_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:groupProto.QueryGroupsResponse.errmsg)
}
inline std::string* QueryGroupsResponse::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:groupProto.QueryGroupsResponse.errmsg)
  return _s;
}
inline const std::string& QueryGroupsResponse::_internal_errmsg() const {
  return _impl_.errmsg_.Get();
}
inline void QueryGroupsResponse::_internal_set_errmsg(const std::string& value) {
  
  _impl_.errmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryGroupsResponse::_internal_mutable_errmsg() {
  
  return _impl_.errmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* QueryGroupsResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:groupProto.QueryGroupsResponse.errmsg)
  return _impl_.errmsg_.Release();
}
inline void QueryGroupsResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  _impl_.errmsg_.SetAllocated(errmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errmsg_.IsDefault()) {
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:groupProto.QueryGroupsResponse.errmsg)
}

// repeated .groupProto.Group groups = 3;
inline int QueryGroupsResponse::_internal_groups_size() const {
  return _impl_.groups_.size();
}
inline int QueryGroupsResponse::groups_size() const {
  return _internal_groups_size();
}
inline void QueryGroupsResponse::clear_groups() {
  _impl_.groups_.Clear();
}
inline ::groupProto::Group* QueryGroupsResponse::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:groupProto.QueryGroupsResponse.groups)
  return _impl_.groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::groupProto::Group >*
QueryGroupsResponse::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:groupProto.QueryGroupsResponse.groups)
  return &_impl_.groups_;
}
inline const ::groupProto::Group& QueryGroupsResponse::_internal_groups(int index) const {
  return _impl_.groups_.Get(index);
}
inline const ::groupProto::Group& QueryGroupsResponse::groups(int index) const {
  // @@protoc_insertion_point(field_get:groupProto.QueryGroupsResponse.groups)
  return _internal_groups(index);
}
inline ::groupProto::Group* QueryGroupsResponse::_internal_add_groups() {
  return _impl_.groups_.Add();
}
inline ::groupProto::Group* QueryGroupsResponse::add_groups() {
  ::groupProto::Group* _add = _internal_add_groups();
  // @@protoc_insertion_point(field_add:groupProto.QueryGroupsResponse.groups)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::groupProto::Group >&
QueryGroupsResponse::groups() const {
  // @@protoc_insertion_point(field_list:groupProto.QueryGroupsResponse.groups)
  return _impl_.groups_;
}

// -------------------------------------------------------------------

// QueryGroupUsersRequest

// int32 userid = 1;
inline void QueryGroupUsersRequest::clear_userid() {
  _impl_.userid_ = 0;
}
inline int32_t QueryGroupUsersRequest::_internal_userid() const {
  return _impl_.userid_;
}
inline int32_t QueryGroupUsersRequest::userid() const {
  // @@protoc_insertion_point(field_get:groupProto.QueryGroupUsersRequest.userid)
  return _internal_userid();
}
inline void QueryGroupUsersRequest::_internal_set_userid(int32_t value) {
  
  _impl_.userid_ = value;
}
inline void QueryGroupUsersRequest::set_userid(int32_t value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:groupProto.QueryGroupUsersRequest.userid)
}

// int32 groupid = 2;
inline void QueryGroupUsersRequest::clear_groupid() {
  _impl_.groupid_ = 0;
}
inline int32_t QueryGroupUsersRequest::_internal_groupid() const {
  return _impl_.groupid_;
}
inline int32_t QueryGroupUsersRequest::groupid() const {
  // @@protoc_insertion_point(field_get:groupProto.QueryGroupUsersRequest.groupid)
  return _internal_groupid();
}
inline void QueryGroupUsersRequest::_internal_set_groupid(int32_t value) {
  
  _impl_.groupid_ = value;
}
inline void QueryGroupUsersRequest::set_groupid(int32_t value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:groupProto.QueryGroupUsersRequest.groupid)
}

// -------------------------------------------------------------------

// QueryGroupUsersResponse

// int32 errcode = 1;
inline void QueryGroupUsersResponse::clear_errcode() {
  _impl_.errcode_ = 0;
}
inline int32_t QueryGroupUsersResponse::_internal_errcode() const {
  return _impl_.errcode_;
}
inline int32_t QueryGroupUsersResponse::errcode() const {
  // @@protoc_insertion_point(field_get:groupProto.QueryGroupUsersResponse.errcode)
  return _internal_errcode();
}
inline void QueryGroupUsersResponse::_internal_set_errcode(int32_t value) {
  
  _impl_.errcode_ = value;
}
inline void QueryGroupUsersResponse::set_errcode(int32_t value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:groupProto.QueryGroupUsersResponse.errcode)
}

// bytes errmsg = 2;
inline void QueryGroupUsersResponse::clear_errmsg() {
  _impl_.errmsg_.ClearToEmpty();
}
inline const std::string& QueryGroupUsersResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:groupProto.QueryGroupUsersResponse.errmsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryGroupUsersResponse::set_errmsg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.errmsg_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:groupProto.QueryGroupUsersResponse.errmsg)
}
inline std::string* QueryGroupUsersResponse::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:groupProto.QueryGroupUsersResponse.errmsg)
  return _s;
}
inline const std::string& QueryGroupUsersResponse::_internal_errmsg() const {
  return _impl_.errmsg_.Get();
}
inline void QueryGroupUsersResponse::_internal_set_errmsg(const std::string& value) {
  
  _impl_.errmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryGroupUsersResponse::_internal_mutable_errmsg() {
  
  return _impl_.errmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* QueryGroupUsersResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:groupProto.QueryGroupUsersResponse.errmsg)
  return _impl_.errmsg_.Release();
}
inline void QueryGroupUsersResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  _impl_.errmsg_.SetAllocated(errmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errmsg_.IsDefault()) {
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:groupProto.QueryGroupUsersResponse.errmsg)
}

// repeated int32 useridVec = 3;
inline int QueryGroupUsersResponse::_internal_useridvec_size() const {
  return _impl_.useridvec_.size();
}
inline int QueryGroupUsersResponse::useridvec_size() const {
  return _internal_useridvec_size();
}
inline void QueryGroupUsersResponse::clear_useridvec() {
  _impl_.useridvec_.Clear();
}
inline int32_t QueryGroupUsersResponse::_internal_useridvec(int index) const {
  return _impl_.useridvec_.Get(index);
}
inline int32_t QueryGroupUsersResponse::useridvec(int index) const {
  // @@protoc_insertion_point(field_get:groupProto.QueryGroupUsersResponse.useridVec)
  return _internal_useridvec(index);
}
inline void QueryGroupUsersResponse::set_useridvec(int index, int32_t value) {
  _impl_.useridvec_.Set(index, value);
  // @@protoc_insertion_point(field_set:groupProto.QueryGroupUsersResponse.useridVec)
}
inline void QueryGroupUsersResponse::_internal_add_useridvec(int32_t value) {
  _impl_.useridvec_.Add(value);
}
inline void QueryGroupUsersResponse::add_useridvec(int32_t value) {
  _internal_add_useridvec(value);
  // @@protoc_insertion_point(field_add:groupProto.QueryGroupUsersResponse.useridVec)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
QueryGroupUsersResponse::_internal_useridvec() const {
  return _impl_.useridvec_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
QueryGroupUsersResponse::useridvec() const {
  // @@protoc_insertion_point(field_list:groupProto.QueryGroupUsersResponse.useridVec)
  return _internal_useridvec();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
QueryGroupUsersResponse::_internal_mutable_useridvec() {
  return &_impl_.useridvec_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
QueryGroupUsersResponse::mutable_useridvec() {
  // @@protoc_insertion_point(field_mutable_list:groupProto.QueryGroupUsersResponse.useridVec)
  return _internal_mutable_useridvec();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace groupProto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::groupProto::ROLE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::groupProto::ROLE>() {
  return ::groupProto::ROLE_descriptor();
}
template <> struct is_proto_enum< ::groupProto::STATE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::groupProto::STATE>() {
  return ::groupProto::STATE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_groupService_2eproto
